version: '3.9'
services:
  cryton_core:
    restart: always
    image: registry.gitlab.ics.muni.cz:443/cryton/cryton-core
    container_name: cryton-core
    env_file:
      - .env
    ports:
      - "8000:80"
    depends_on:
      cryton_pgbouncer:
        condition: service_started
      cryton_rabbit:
        condition: service_healthy

  cryton_proxy:
    restart: always
    image: registry.gitlab.ics.muni.cz:443/cryton/cryton-core:proxy
    container_name: cryton-proxy
    network_mode: service:cryton_core
    depends_on:
      cryton_core:
        condition: service_started

  cryton_db:
    restart: always
    image: postgres:15
    container_name: cryton-db
    env_file:
      - .env
    environment:
      POSTGRES_PASSWORD: $CRYTON_CORE_DB_PASSWORD
      POSTGRES_USER: $CRYTON_CORE_DB_USERNAME
      POSTGRES_DB: $CRYTON_CORE_DB_NAME
      POSTGRES_HOST_AUTH_METHOD: md5
    volumes:
      - cryton_db_data:/var/lib/postgresql/data
    healthcheck:
      test: /usr/bin/pg_isready -U $$POSTGRES_USER
      interval: 20s
      timeout: 10s
      retries: 5

  cryton_pgbouncer:
    restart: always
    image: bitnami/pgbouncer:1.18.0
    container_name: cryton-pgbouncer
    depends_on:
      cryton_db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      POSTGRESQL_HOST: cryton_db
      POSTGRESQL_USERNAME: $CRYTON_CORE_DB_USERNAME
      POSTGRESQL_DATABASE: $CRYTON_CORE_DB_NAME
      POSTGRESQL_PASSWORD: $CRYTON_CORE_DB_PASSWORD
      PGBOUNCER_DATABASE: $CRYTON_CORE_DB_NAME
      PGBOUNCER_PORT: 5432
      PGBOUNCER_MAX_CLIENT_CONN: 1000
      PGBOUNCER_MIN_POOL_SIZE: 8
      PGBOUNCER_POOL_MODE: transaction

  cryton_rabbit:
    restart: always
    image: rabbitmq:3.11-management
    container_name: cryton-rabbit
    env_file:
      - .env
    environment:
      RABBITMQ_DEFAULT_USER: $CRYTON_CORE_RABBIT_USERNAME
      RABBITMQ_DEFAULT_PASS: $CRYTON_CORE_RABBIT_PASSWORD
    ports:
      - "5672:5672"
      - "127.0.0.1:15672:15672"
    healthcheck:
      test: rabbitmqctl eval '
        { true, rabbit_app_booted_and_running } = { rabbit:is_booted(node()), rabbit_app_booted_and_running },
        { [], no_alarms } = { rabbit:alarms(), no_alarms },
        [] /= rabbit_networking:active_listeners(),
        rabbitmq_node_is_healthy.
        ' || exit 1
      interval: 20s
      timeout: 10s
      retries: 5

  cryton_worker:
    restart: always
    image: registry.gitlab.ics.muni.cz:443/cryton/cryton-worker:kali
    container_name: cryton-worker
    network_mode: host
    env_file:
      - .env
    depends_on:
      cryton_empire:
        condition: service_started
      cryton_msf:
        condition: service_started

  cryton_empire:
    restart: always
    image: bcsecurity/empire:v4.10.0
    container_name: cryton-empire
    network_mode: host
    env_file:
      - .env
    stdin_open: true
    command: [ "server", "--username", "$CRYTON_WORKER_EMPIRE_USERNAME", "--password", "$CRYTON_WORKER_EMPIRE_PASSWORD" ]

  cryton_msf:
    restart: always
    image: registry.gitlab.ics.muni.cz:443/cryton/configurations/metasploit-framework:0
    container_name: cryton-msf
    network_mode: host
    env_file:
      - .env
    environment:
      MSF_RPC_HOST: $CRYTON_WORKER_MSF_RPC_HOST
      MSF_RPC_PORT: $CRYTON_WORKER_MSF_RPC_PORT
      MSF_RPC_SSL: $CRYTON_WORKER_MSF_RPC_SSL
      MSF_RPC_USERNAME: $CRYTON_WORKER_MSF_RPC_USERNAME
      MSF_RPC_PASSWORD: $CRYTON_WORKER_MSF_RPC_PASSWORD
      MSF_DB_HOST: $CRYTON_WORKER_MSF_DB_HOST
      MSF_DB_PORT: $CRYTON_WORKER_MSF_DB_PORT
      MSF_DB_NAME: $CRYTON_WORKER_MSF_DB_NAME
      MSF_DB_USERNAME: $CRYTON_WORKER_MSF_DB_USERNAME
      MSF_DB_PASSWORD: $CRYTON_WORKER_MSF_DB_PASSWORD
    tty: true
    depends_on:
      cryton_msf_db:
        condition: service_healthy

  cryton_cli:
    restart: always
    image: registry.gitlab.ics.muni.cz:443/cryton/cryton-cli
    container_name: cryton-cli
    network_mode: host
    tty: true

volumes:
  cryton_db_data:
