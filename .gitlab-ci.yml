image: registry.gitlab.ics.muni.cz:443/cryton/configurations/ci-base:latest

variables:
  DOCKER_TLS_CERTDIR: "/certs"
  CRYTON_APP_DIRECTORY: "$CI_PROJECT_DIR/cryton/"

default:
  interruptible: true
  artifacts:
    expire_in: 30 days

stages:
  - test
  - publish
  - build
  - deploy

.documentation:
  image: registry.gitlab.ics.muni.cz:443/cryton/configurations/production-base:latest
  rules:
    - changes:
        - mkdocs.yml
        - docs/**/*
        - .gitlab-ci.yml
    - when: never

# test
.tests:
  stage: test
  image: registry.gitlab.ics.muni.cz:443/cryton/configurations/ci-base:latest
  coverage: '/TOTAL.*\s+(\d+%)$/'
  rules:
    - changes:
        - cryton/**/*
        - tests/**/*
        - .coveragerc-*
        - settings*
        - .gitlab-ci.yml
        - poetry.lock
        - pyproject.toml
        - tox.ini
    - when: never

unit_tests:
  extends: .tests
  script:
    - tox run-parallel -- tests/unit/ --cov=cryton --cov-config=.coveragerc-unit
    - cat coverage.readable

integration_tests:
  extends: .tests
  script:
    - tox run-parallel -- tests/integration/ --cov=cryton --cov-config=.coveragerc-integration
    - cat coverage.readable

build_documentation:
  extends: .documentation
  stage: test
  before_script:
    - poetry install --with docs
  script:
    - poetry run mkdocs build

# publish
.publish:
  stage: publish
  rules:
    - if: $CI_SERVER_HOST != "gitlab.ics.muni.cz"
      when: never
    - if: $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+\.([0-9]|[0-z])+$/ && $CI_COMMIT_REF_PROTECTED == "true"

.build_docker_image:
  extends: .publish
  image:
    name: gcr.io/kaniko-project/executor:v1.19.2-debug
    entrypoint: [ "" ]
  variables:
    BUILD_TARGET: "production"
    IMAGE_NAME_POSTFIX: ""
    DOCKERFILE: "Dockerfile"
  before_script:
    # Set variables
    - export IMAGE_TAG_CURRENT=$CI_COMMIT_TAG
    - export IMAGE_TAG_MINOR=${IMAGE_TAG_CURRENT%.*}
    - export IMAGE_TAG_MAJOR=${IMAGE_TAG_MINOR%.*}
    - export IMAGE_DESTINATION=$CI_REGISTRY_IMAGE/$IMAGE_NAME_POSTFIX
    # Check variables
    - echo "IMAGE_DESTINATION $IMAGE_DESTINATION"
    - echo "BUILD_TARGET $BUILD_TARGET"
    - echo "IMAGE_TAG_CURRENT $IMAGE_TAG_CURRENT"
    - echo "IMAGE_TAG_MINOR $IMAGE_TAG_MINOR"
    - echo "IMAGE_TAG_MAJOR $IMAGE_TAG_MAJOR"
  script:
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"username\":\"${CI_REGISTRY_USER}\",\"password\":\"${CI_REGISTRY_PASSWORD}\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --context $CI_PROJECT_DIR
      --dockerfile $DOCKERFILE
      --target $BUILD_TARGET
      --skip-unused-stages
      --destination $IMAGE_DESTINATION:$IMAGE_TAG_CURRENT
      --destination $IMAGE_DESTINATION:$IMAGE_TAG_MINOR
      --destination $IMAGE_DESTINATION:$IMAGE_TAG_MAJOR
      --destination $IMAGE_DESTINATION:latest
      --label version="$IMAGE_TAG_CURRENT"
      --label commit="$CI_COMMIT_SHA"

upload_package_to_pypi:
  extends: .publish
  image: registry.gitlab.ics.muni.cz:443/cryton/configurations/production-base:latest
  script:
    - poetry config pypi-token.pypi $PYPI_TOKEN
    - poetry publish --build

build_docker_image_hive:
  extends: .build_docker_image
  variables:
    IMAGE_NAME_POSTFIX: "hive"
    DOCKERFILE: "Dockerfile-hive"

build_docker_image_api_proxy:
  extends: .build_docker_image
  variables:
    IMAGE_NAME_POSTFIX: "api-proxy"
    DOCKERFILE: "Dockerfile-api-proxy"

build_docker_image_cli:
  extends: .build_docker_image
  variables:
    IMAGE_NAME_POSTFIX: "cli"
    DOCKERFILE: "Dockerfile-cli"

build_docker_image_worker:
  extends: .build_docker_image
  variables:
    IMAGE_NAME_POSTFIX: "worker"
    DOCKERFILE: "Dockerfile-worker"

# Build and deploy pages
pages:
  extends: .documentation
  stage: build
  variables:
    HTTPS_REMOTE: https://${PROJECT_BOT_USER}:${PROJECT_BOT_TOKEN}@${CI_SERVER_HOST}/${CI_PROJECT_PATH}.git
    PAGES_BRANCH: "pages"
  before_script:
    - apt update && apt install -y git
    - git config user.name $PROJECT_BOT_USER
    - git config user.email $PROJECT_BOT_USER@example.com
    - git fetch origin $PAGES_BRANCH || echo "Pages branch not deployed yet."
  rules:
    - if: $CI_SERVER_HOST != "gitlab.ics.muni.cz"
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH && $CI_COMMIT_REF_PROTECTED == "true"
    - if: $CI_COMMIT_TAG =~ /^[0-9]+\.[0-9]+|x\.([0-9]|[0-z])+$/ && $CI_COMMIT_REF_PROTECTED == "true"
  script:
    - poetry install --with docs
    - git checkout -b $PAGES_BRANCH origin/$PAGES_BRANCH || echo "Pages branch not deployed yet."
    - git checkout $CI_COMMIT_SHA
    - |
      if [[ "$CI_COMMIT_TAG" != "" ]]; then
        export DOCUMENTATION_VERSION=${CI_COMMIT_TAG%%.*}.x
        export ALIAS=latest
      else
        export DOCUMENTATION_VERSION=master
        export ALIAS=""
      fi
    - echo "DOCUMENTATION_VERSION $DOCUMENTATION_VERSION"
    - echo "ALIAS $ALIAS"
    - poetry run mike delete
      --push
      --remote $HTTPS_REMOTE
      --branch $PAGES_BRANCH
      --deploy-prefix public
      $DOCUMENTATION_VERSION || echo "Version not deployed yet."
    - poetry run mike deploy
      --update-aliases
      --push
      --remote $HTTPS_REMOTE
      --branch $PAGES_BRANCH
      --alias-type=redirect
      --deploy-prefix public
      $DOCUMENTATION_VERSION $ALIAS
    - git checkout $PAGES_BRANCH
    - git pull
    - git log -1
  artifacts:
    expire_in: 30 days
    paths:
      - public/
