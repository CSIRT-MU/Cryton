{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Cryton is a Cron-like red team framework for complex attack scenarios automation and scheduling. It provides ways to plan, execute, and evaluate multistep attacks.</p> <p>Main features:</p> <ul> <li>Reliable remote execution</li> <li>Reproducible scenarios</li> <li>Set of modules (Nmap, Medusa, FFUF, ...) with machine-readable output</li> <li>Metasploit support</li> <li>Empire support</li> <li>Atomic Red Team techniques support</li> </ul> <p>All of its open-source components can be found here.</p> Are there any other usages? <ul> <li>Breach &amp; attack emulation</li> <li>Automation of penetration testing and infrastructure scanning</li> <li>Scheduler or executor across multiple environments</li> </ul> <p>No time to read?</p> <ul> <li>Check out the quick-start guide</li> <li>If you can't find something, try using the search on the top of the page</li> </ul>"},{"location":"#purpose","title":"Purpose","text":"<p>The main purpose of Cryton is to execute complex attack scenarios, in which the system under test is known in advance. It was designed as such to assist red teams in cybersecurity exercises in means of repeatability of attack scenarios. These scenarios are often prepared in advance and reflect vulnerabilities hidden in the blue team's infrastructure.</p> <p>Imagine you are taking part in a cyber defense exercise as a tutor. The task for your trainees is to defend a system or a whole infrastructure (which you prepared) against an attacker. This system is full of vulnerabilities and misconfigurations (which you prepared as well). Your trainees have one hour to fix as many of these issues as possible. Imagine you have to check each system for all the fixes to see how your trainees managed to succeed. How would you do that effectively?</p> <p>This is where Cryton comes into play. If you know all the vulnerabilities in the trainees' system - and you do - you can prepare an attack scenario to check if they are still available and working after the fix. Cryton will execute the plan against all targets you tell it to and then generate reports (human and machine-readable). You can then not only see, which attack steps did succeed on which system, but also score your trainees based on these results.</p> <p>With this in mind, you should not expect Cryton to be an evil artificial intelligence capable of taking over the world. It is simply a scheduler for Python modules. The scheduler executes these modules according to some execution tree with conditions based on each step of the scenario. Each module is a script orchestrating some well-known attack tools, but that is it.</p>"},{"location":"#support","title":"Support","text":"<p>Cryton is tested and targeted primarily on Debian and Kali Linux. However, it should be possible to use it everywhere if the requirements are met. Please keep in mind that only the latest version is supported and issues regarding different OS or distributions may not be resolved.</p> <p>Using Docker should render the support limitations irrelevant.</p>"},{"location":"#changelog","title":"Changelog","text":"<p>The releases and their changes can be found on the official Gitlab</p> <ul> <li>Cryton release page</li> <li>Frontend release page</li> </ul>"},{"location":"acknowledgements/","title":"Acknowledgements","text":"<p>Several research activities helped us to create this open-source project. The official acknowledgments follow below.</p> This research was supported by the Security Research Programme of the Czech Republic 2015-2022 (BV III/1 - VS) granted by the Ministry of the Interior of the Czech Republic under No. VI20202022133 - Breach Emulation and Attack Simulation Toolkit (BEAST) This research was supported by the Security Research Programme of the Czech Republic 2015\u20132020 (BV III/1 \u2013 VS) granted by the Ministry of the Interior of the Czech Republic under No. VI20162019014 \u2013 Simulation, detection, and mitigation of cyber threats endangering critical infrastructure."},{"location":"architecture/","title":"Architecture","text":""},{"location":"architecture/#hive","title":"Hive","text":"<p>Hive is the brain of Cryton. It provides you with options to manage Workers, scenarios, and executions. Its purpose is to store scenarios, states, evidence, and control the executions based on given parameters.</p> <p>It can be managed through its REST API.</p>"},{"location":"architecture/#cli","title":"CLI","text":"<p>There are two ways to interact with Cryton or, more precisely, utilize its REST API.</p> <p>One of them is CLI, which allows a simple way to run (possibly automate) actions from the terminal.</p>"},{"location":"architecture/#frontend","title":"Frontend","text":"<p>A user-friendly alternative to CLI is Cryton Frontend, a graphical web interface providing additional functionality to improve the user experience.</p>"},{"location":"architecture/#worker","title":"Worker","text":"<p>An orchestrator for executing modules remotely. It gives you the option to validate module input, manage module execution, and gather results. It communicates with Hive using RabbitMQ message broker.</p>"},{"location":"architecture/#modules","title":"Modules","text":"<p>Cryton (attack) modules are a collection of Python scripts/packages with the goal of orchestrating known offensive security tools (Nmap, Metasploit, Medusa, ...).</p>"},{"location":"architecture/#technological-decisions","title":"Technological decisions","text":"<p>The next section tries to explain the choices for the currently employed technologies.</p>"},{"location":"architecture/#apscheduler","title":"APScheduler","text":"<p>This was the first choice made for the scheduler module. It allows you to schedule a Python method on a specific time or day or even interval. It is pretty lightweight and does not need much in terms of resources or capacity. So far we have not found anything better suited for the task.</p>"},{"location":"architecture/#django-orm","title":"Django ORM","text":"<p>In the beginning, Cryton used the SQLite database with direct access. That changed as SQLite is not good with scaling for the future. The second choice was PostgreSQL, which stayed to this day, but it was updated with the use of the Django ORM. Using the Django REST framework for the REST interface also emerged from this choice.</p>"},{"location":"architecture/#rabbit-mq","title":"Rabbit MQ","text":"<p>For developing Master-Worker architecture, where you can issue commands remotely, we needed some kind of RPC. Although, as experience showed us, we also needed it to be asynchronous. That's why we chose a messaging broker RabbitMQ.</p>"},{"location":"architecture/#metasploit","title":"Metasploit","text":"<p>I guess everyone in the IT security field has heard about the Metasploit framework. It is one of the most complete and usable open-source attack tools available. Of course, Cryton uses it for some attack modules - the majority of simulated attacks in CDXs usually do use Metasploit in some way. But its attacking capabilities are not the only reason to use it. Its real advantage is Metasploit's session management. Every time you open a session to some machine it stores it under a specific ID which you can later use to communicate with the target. This is one of the main features you can use while executing your attack scenario in Cryton.</p>"},{"location":"architecture/#empire","title":"Empire","text":"<p>For post-exploitation attacks, we decided to add support for an open-source project called Empire (version 4.10.0), which is a post-exploitation framework that includes pure-PowerShell Windows agents, Python 3 Linux/OS X agents, and C# agents. The framework offers cryptological-secure communications and flexible architecture. This is done via asynchronous communication between our Worker component and an Empire c2 server.</p>"},{"location":"architecture/#docker-compose","title":"Docker (compose)","text":"<p>To bundle everything together and make the deployment effortless, we use Docker or Docker Compose configurations.</p>"},{"location":"contribution-guide/","title":"How to contribute","text":"<p>All help is appreciated.</p> <p>Please post bugs, suggestions, and contributions to the GitHub.</p> <p>Before you create an issue, make sure it doesn't exist. If the issue exists in the official Gitlab repository, please mention it in your issue.</p> <p>In case you want to support the project development by providing patches, features, or modules, please check out the development section.</p>"},{"location":"execution-example/","title":"Execution example","text":"<p>Now, we will walk through a simple scenario execution.</p> <p>In case you need a testing environment or an advanced example, feel free to use the playground.</p> <p>Prerequisites</p> <p>It is assumed that you've followed the quick-start guide.</p>"},{"location":"execution-example/#create-a-plan-template","title":"Create a plan template","text":"<p>The first step to run an automated scenario is to create its description - template.</p> <p>We will be using this example. It describes a scenario with one stage and a single step (action).</p> Download the template curlwget <pre><code>curl -O https://gitlab.ics.muni.cz/cryton/cryton/-/raw/stable/2/examples/functionality/basic/template.yml\n</code></pre> <pre><code>wget https://gitlab.ics.muni.cz/cryton/cryton/-/raw/stable/2/examples/functionality/basic/template.yml\n</code></pre> <p>Before we upload the template to Cryton, we should validate it. This can be done with: <pre><code>cryton-cli plans validate template.yml\n</code></pre></p> Example <pre><code>cryton-cli plans validate template.yml\n</code></pre> <p>Expected output: <pre><code>Plan successfully validated! (&lt;response&gt;)\n</code></pre></p> <p>If we are satisfied with our template, we can upload it using CLI: <pre><code>cryton-cli plan-templates create template.yml\n</code></pre></p> Example <pre><code>cryton-cli plan-templates create template.yml\n</code></pre> <p>Expected output: <pre><code>Template successfully created! ({'id': 1})\n</code></pre></p>"},{"location":"execution-example/#create-a-plan-instance","title":"Create a plan instance","text":"<p>Now we need to create a plan instance we will use for our attack/run. Since our template has no inventory variables, we will be only using the template (its ID we got from the previous step) to create it.</p> <p>To create a new Plan instance use: <pre><code>cryton-cli plans create &lt;TEMPLATE_ID&gt;\n</code></pre></p> Example <pre><code>cryton-cli plans create 1 -i inventory.yml\n</code></pre> <p>Expected output: <pre><code>Plan Instance successfully created! ({'id': 1})\n</code></pre></p>"},{"location":"execution-example/#register-a-worker","title":"Register a Worker","text":"<p>To be able to run the scenario, we need to register a new Worker. Keep in mind that WORKER_NAME must match the Worker\u2019s <code>CRYTON_WORKER_NAME</code> setting: <pre><code>cryton-cli workers create &lt;WORKER_NAME&gt; -d &lt;WORKER_DESCRIPTION&gt;\n</code></pre></p> Example <pre><code>cryton-cli workers create worker -d \"my worker on localhost\"\n</code></pre> <p>Expected output: <pre><code>Worker successfully created! ({'id': 1})\n</code></pre></p> <p>To check if the Worker is responding, run a health check: <pre><code>cryton-cli workers health-check &lt;WORKER_ID&gt;\n</code></pre></p> Example <pre><code>cryton-cli workers health-check 1\n</code></pre> <p>Expected output: <pre><code>The Worker successfully checked! (&lt;response&gt;)\n</code></pre></p>"},{"location":"execution-example/#create-a-run","title":"Create a run","text":"<p>Finally, we create a new Run using the previously created plan instance and Worker: <pre><code>cryton-cli runs create &lt;PLAN_INSTANCE_ID&gt; &lt;WORKER_ID&gt;\n</code></pre></p> Example <pre><code>cryton-cli runs create 1 1\n</code></pre> <p>Expected output: <pre><code>Run successfully created! ({'id': 1})\n</code></pre></p>"},{"location":"execution-example/#execute-the-run","title":"Execute the run","text":"<p>It works... but at what cost?</p> <p>Before you proceed with running any scenario, make sure you are allowed to do so. Otherwise, there may be consequences.</p> <p>Now that everything is prepared, we can execute our Run immediately or schedule it for later.</p> immediatelyschedule it for later <p>To execute the Run immediately:</p> <pre><code>cryton-cli runs execute &lt;RUN_ID&gt;\n</code></pre> Example <pre><code>cryton-cli runs execute 1\n</code></pre> <p>Expected output: <pre><code>Run successfully executed! (Run 1 was executed.)\n</code></pre></p> <p>Run executions can be scheduled to a specific date and time. By default, the system timezone will be used. To use the UTC timezone, use the <code>--utc-timezone</code> flag. <pre><code>cryton-cli runs schedule &lt;RUN_ID&gt; &lt;DATE&gt; &lt;TIME&gt;\n</code></pre></p> Example <pre><code>cryton-cli runs schedule 1 2020-06-08 10:00:00\n</code></pre> <p>Expected output: <pre><code>Run successfully scheduled! (Run 1 is scheduled for 2020-06-08 10:00:00.)\n</code></pre></p>"},{"location":"execution-example/#show-run-information","title":"Show run information","text":"<p>Check Run's state and other useful information: <pre><code>cryton-cli runs show &lt;RUN_ID&gt;\n</code></pre></p> Example <pre><code>cryton-cli runs show 1\n</code></pre> <p>Expected output: <pre><code>id: 1, schedule_time: None, start_time: 2021-05-24T00:08:45.200025, pause_time: None, finish_time: 2021-05-24T00:09:18.397199, state: RUNNING\n</code></pre></p>"},{"location":"execution-example/#get-a-report","title":"Get a report","text":"<p>Get a report of your Run and its results anytime during its execution: <pre><code>cryton-cli runs report &lt;RUN_ID&gt;\n</code></pre></p> Example <pre><code>cryton-cli runs report 1\n</code></pre> <p>Expected output: <pre><code>Successfully created Run's report! (file saved at: /tmp/report_run_1_2020-06-08-10-15-00-257994_xdQeV)\n</code></pre></p> Read the report directly <p>Reports can be viewed directly in cryton-cli (to quit, press Q): <pre><code>cryton-cli runs report &lt;RUN_ID&gt; --less\n</code></pre></p> Example <pre><code>cryton-cli runs report 1 --less\n</code></pre>"},{"location":"installation/","title":"Installation","text":"<p>In this section we will go through our installation options. In case you just want to test Cryton, check the quick-start or playground pages.</p> <p>Do I need to install all components?</p> <p>Since the version 2.0.0, Cryton is shipped as a single application with the option to select extras. Cryton's front-end is treated as a different application.</p> <ul> <li>Hive and Worker are usually installed on different hosts</li> <li>Installing the front-end is unnecessary if you wish to control Cryton using only the CLI</li> <li>CLI and front-end can be deployed on a different host and installed on demand</li> </ul> Installation using Ansible is deprecated! <p>TLDR: Use Docker Compose instead. Modify the existing <code>docker-compose.*</code> files in the Cryton repository.</p> <p>The Ansible roles were created to simplify the installation process since the project had multiple repositories, and installation was a bit cumbersome.</p> <p>Currently, the project can be installed using a single Docker Compose file. This results in a more robust and understandable installation experience.</p> <p>If you want Ansible roles back or need help creating yours, feel free to open an issue.</p>"},{"location":"installation/#prerequisites","title":"Prerequisites","text":"<p>The following is a list of applications used and required by Cryton (its components).</p> HiveWorker <ul> <li>RabbitMQ server</li> <li>PostgreSQL database</li> <li>PgBouncer</li> </ul> Use Docker images for a quick start <p>The following commands allow you to quickly deploy the prerequisites without studying them. They use Cryton's default credentials and shouldn't be used for production. Be aware that these commands may expose ports to network, read them first.</p> <p>RabbitMQ: <pre><code>docker run --rm --detach --restart always \\\n      --publish 5672:5672 \\\n      --hostname rabbit \\\n      --name rabbit \\\n      --env RABBITMQ_DEFAULT_USER=cryton \\\n      --env RABBITMQ_DEFAULT_PASS=cryton \\\n      rabbitmq:3.12\n</code></pre></p> <p>Postgres: <pre><code>docker run --rm --detach --restart always \\\n      --hostname postgres \\\n      --name postgres \\\n      --volume cryton_db_data:/var/lib/postgresql/data \\\n      --env POSTGRES_PASSWORD=cryton \\\n      --env POSTGRES_USER=cryton \\\n      --env POSTGRES_DB=cryton \\\n      --env POSTGRES_HOST_AUTH_METHOD=md5 \\\n      postgres:16\n</code></pre></p> <p>PgBouncer: <pre><code>docker run --rm --detach --restart always \\\n      --publish 127.0.0.1:5432:5432 \\\n      --hostname pgbouncer \\\n      --name pgbouncer \\\n      --volume cryton_db_data:/var/lib/postgresql/data \\\n      --env POSTGRESQL_HOST=postgres \\\n      --env POSTGRESQL_PASSWORD=cryton \\\n      --env POSTGRESQL_USERNAME=cryton \\\n      --env POSTGRESQL_DATABASE=cryton \\\n      --env PGBOUNCER_DATABASE=cryton \\\n      --env PGBOUNCER_PORT=5432 \\\n      --env PGBOUNCER_MAX_CLIENT_CONN=1000 \\\n      --env PGBOUNCER_MIN_POOL_SIZE=8 \\\n      --env PGBOUNCER_POOL_MODE=transaction \\\n      bitnami/pgbouncer:1.22.0\n</code></pre></p> <ul> <li>Metasploit Framework</li> <li>PostgreSQL database (for Metasploit Framework)</li> <li>Empire C2</li> </ul> Use Docker images for a quick start <p>The following commands allow you to quickly deploy the prerequisites without studying them. They use Cryton's default credentials and shouldn't be used for production. Be aware that these commands may expose ports to network, read them first.</p> <p>Metasploit Framework: <pre><code>docker run --rm --detach --restart always \\\n      --tty \\\n      --network host \\\n      --name metasploit \\\n      --env METASPLOIT_DB_HOST=127.0.0.1 \\\n      --env METASPLOIT_DB_PORT=5432 \\\n      --env METASPLOIT_DB_NAME=cryton \\\n      --env METASPLOIT_DB_USERNAME=cryton \\\n      --env METASPLOIT_DB_PASSWORD=cryton \\\n      sadparad1se/metasploit-framework:rpc\n</code></pre></p> <p>Postgres: <pre><code>docker run --rm --detach --restart always \\\n      --publish 127.0.0.1:5432:5432 \\\n      --hostname postgres \\\n      --name postgres \\\n      --volume cryton_db_data:/var/lib/postgresql/data \\\n      --env POSTGRES_PASSWORD=cryton \\\n      --env POSTGRES_USER=cryton \\\n      --env POSTGRES_DB=cryton \\\n      --env POSTGRES_HOST_AUTH_METHOD=md5 \\\n      postgres:16\n</code></pre></p> <p>Empire <pre><code>docker run --rm --detach --restart always \\\n      --interactive \\\n      --network host \\\n      --name empire \\\n      bcsecurity/empire:v4.10.0 \\\n      server --username cryton --password cryton\n</code></pre></p>"},{"location":"installation/#with-pipx","title":"With pipx","text":"<p>Cryton is available on PyPI and can be installed using pipx or pip. It is highly recommended to use pipx, since it creates and manages an isolated environment.</p> <p>Requirements</p> <ul> <li>Python &gt;=3.11,&lt;3.13</li> <li>pipx</li> </ul> HiveWorkerCLIAll-in-one <p>pipx <pre><code>pipx install cryton[hive,modules]==2.*\n</code></pre></p> <p>pip <pre><code>pip install --user cryton[hive,modules]==2.*\n</code></pre></p> <p>pipx <pre><code>pipx install cryton[worker]==2.*\n</code></pre></p> <p>pip <pre><code>pip install --user cryton[worker]==2.*\n</code></pre></p> <p>pipx <pre><code>pipx install cryton[cli]==2.*\n</code></pre></p> <p>pip <pre><code>pip install --user cryton[cli]==2.*\n</code></pre></p> <p>pipx <pre><code>pipx install cryton[all]==2.*\n</code></pre></p> <p>pip <pre><code>pip install --user cryton[all]==2.*\n</code></pre></p> <p>Once you finish the installation, check out the usage page.</p>"},{"location":"installation/#with-docker","title":"With Docker","text":"<p>Cryton is also shipped in the form of Docker images.</p> <p>Requirements</p> <ul> <li>Docker</li> </ul> <p>Note</p> <p>In the following commands, we are using the <code>--network host</code> parameter which tells the container to use host's network interface. You don't have to use it, but make sure the applications and prerequisites can communicate.</p> <p>This doesn't apply to the front-end. We will expose only the necessary port.</p> <p>Once you start the container, and it's healthy, you are all set. Otherwise, check the logs from the unhealthy container (<code>docker logs &lt;container-name&gt;</code>).</p> <p>Before starting the containers, make sure to check out the settings page. Use environment variables to override Container settings.</p> HiveWorkerCLIFrontend <p>Run the container in the background: <pre><code>docker run --network host -d registry.gitlab.ics.muni.cz:443/cryton/cryton/hive:2\n</code></pre></p> <p>Run the container in the background: <pre><code>docker run --network host -d registry.gitlab.ics.muni.cz:443/cryton/cryton/worker:2\n</code></pre></p> <p>It contains the official modules and their prerequisites.</p> <p>Run the container and enter an interactive shell: <pre><code>docker run --network host -it registry.gitlab.ics.muni.cz:443/cryton/cryton/cli:2\n</code></pre></p> <p>Run the container in the background: <pre><code>docker run -d -p 127.0.0.1:8080:80 registry.gitlab.ics.muni.cz:443/cryton/cryton-frontend:2\n</code></pre></p>"},{"location":"installation/#shell-completion","title":"Shell completion","text":"<p>Shell completion is available for the Bash, Zsh, and Fish shell and has to be manually enabled (after successful installation).</p> <p>First, make sure the app directory exists: <pre><code>mkdir -p ~/.local/cryton/\n</code></pre></p> <p>Generate, save, and load the completion script:</p> HiveWorkerCLI BashZshFish <pre><code>_CRYTON_HIVE_COMPLETE=bash_source cryton-hive &gt; ~/.local/cryton/cryton-hive-complete.bash\necho \". ~/.local/cryton/cryton-hive-complete.bash\" &gt;&gt; ~/.bashrc\n</code></pre> <pre><code>_CRYTON_HIVE_COMPLETE=zsh_source cryton-hive &gt; ~/.local/cryton/cryton-hive-complete.zsh\necho \". ~/.local/cryton/cryton-hive-complete.zsh\" &gt;&gt; ~/.zshrc\n</code></pre> <pre><code>_CRYTON_HIVE_COMPLETE=fish_source cryton-hive &gt; ~/.config/fish/completions/cryton-hive-complete.fish\n</code></pre> BashZshFish <pre><code>_CRYTON_WORKER_COMPLETE=bash_source cryton-worker &gt; ~/.local/cryton/cryton-worker-complete.bash\necho \". ~/.local/cryton/cryton-worker-complete.bash\" &gt;&gt; ~/.bashrc\n</code></pre> <pre><code>_CRYTON_WORKER_COMPLETE=zsh_source cryton-worker &gt; ~/.local/cryton/cryton-worker-complete.zsh\necho \". ~/.local/cryton/cryton-worker-complete.zsh\" &gt;&gt; ~/.zshrc\n</code></pre> <pre><code>_CRYTON_WORKER_COMPLETE=fish_source cryton-worker &gt; ~/.config/fish/completions/cryton-worker-complete.fish\n</code></pre> BashZshFish <pre><code>_CRYTON_CLI_COMPLETE=bash_source cryton-cli &gt; ~/.local/cryton/cryton-cli-complete.bash\necho \". ~/.local/cryton/cryton-cli-complete.bash\" &gt;&gt; ~/.bashrc\n</code></pre> <pre><code>_CRYTON_CLI_COMPLETE=zsh_source cryton-cli &gt; ~/.local/cryton/cryton-cli-complete.zsh\necho \". ~/.local/cryton/cryton-cli-complete.zsh\" &gt;&gt; ~/.zshrc\n</code></pre> <pre><code>_CRYTON_CLI_COMPLETE=fish_source cryton-cli &gt; ~/.config/fish/completions/cryton-cli-complete.fish\n</code></pre> <p>You may need to restart your shell for the changes to take effect.</p>"},{"location":"installation/#installing-additional-modules","title":"Installing additional modules","text":"<p>To install an unofficial module, please check here.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2024 Masaryk University</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"logging/","title":"Logging","text":"<p>Logs are created only for Hive and Worker and stored in APP_DIRECTORY/logs. In case you are running in a Docker, they are displayed in the stdout.</p> <p>The logs adhere to the following format: <pre><code>{\"channel_consumer_count\": 7, \"event\": \"Starting channel consumers\", \"logger\": \"cryton-worker\", \"level\": \"debug\", \"timestamp\": \"2025-01-07T11:18:53.922221Z\"}\n{\"event\": \"Opening a new Channel\", \"level\": \"debug\", \"logger\": \"amqpstorm.connection\", \"timestamp\": \"2025-01-07 11:18:53\"}\n</code></pre></p>"},{"location":"logging/#loggers","title":"loggers","text":""},{"location":"logging/#production","title":"Production","text":"<p>Informational Cryton logs and higher are logged into a log file. In case you are running in a Docker, the logs are displayed to the console as well.</p> <p>Step's output is not included in the logs, it can be found in the database/CLI/Frontend.</p> <p>This is the default logger.</p>"},{"location":"logging/#debug","title":"Debug","text":"<p>All logs (even from other loggers) are logged into a log file and console. It also logs the Step's output.</p> <p>To enable the debug logger, update the Hive or Worker settings.</p>"},{"location":"playground/","title":"Playground","text":"<p>Playground is an isolated Docker environment where you can test Cryton's capabilities.</p> <ul> <li>With a single command you can build the whole infrastructure</li> <li>With a single command you can run a predefined attack plan</li> <li>It will run on your machine</li> <li>It takes minutes to build and is easy to reset</li> <li>It allows you to quickly run E2E tests</li> </ul> <p></p> Limitations <p>Docker Compose configuration doesn't allow custom gateways/routers which results in creating overlying networks that simulate separated networks.</p>"},{"location":"playground/#setup","title":"Setup","text":"<p>Requirements</p> <ul> <li>Git</li> <li>Docker Compose</li> <li>System with 8192 MB of RAM and 4 CPU cores</li> </ul> <p>First, we clone the repository and switch into it: <pre><code>git clone https://gitlab.ics.muni.cz/cryton/cryton.git\ncd cryton\n</code></pre></p> <p>Now, we build the infrastructure: <pre><code>docker compose -f docker-compose.yml -f docker-compose.playground.yml up -d --build\n</code></pre></p> <p>Once we are done, Cryton toolset and vulnerable targets should be up and running.</p>"},{"location":"playground/#run-the-prepared-scenario","title":"Run the prepared scenario","text":"<p>We have prepared an example attack scenario that uses multiple Cryton features and is complex enough for showcasing.</p> <p></p> <p>Run the following script in the CLI container to automatically prepare and execute the scenario: <pre><code>docker compose exec cryton_cli /opt/resources/run_example_scenario.sh\n</code></pre></p> <p>Progress and results can be viewed in the front-end at http://localhost:8080/.</p> Instructions for manually running the scenario <p>Enter the CLI container: <pre><code>docker compose exec -it cryton_cli bash\n</code></pre></p> <p>Register and check the Worker: <pre><code>cryton-cli workers create worker\ncryton-cli workers health-check &lt;worker-id&gt;\n</code></pre></p> <p>Validate the template: <pre><code>cryton-cli plans validate /app/examples/scenarios/playground/template.yml -i /app/examples/scenarios/playground/inventory.yml\n</code></pre></p> <p>Upload the template, create a Plan and a Run: <pre><code>cryton-cli plan-templates create /app/examples/scenarios/playground/template.yml\ncryton-cli plans create &lt;plan-template-id&gt; -i /app/examples/scenarios/playground/inventory.yml\ncryton-cli runs create &lt;plan-id&gt; &lt;worker-id&gt;\n</code></pre></p> <p>Execute the Run: <pre><code>cryton-cli runs execute &lt;run-id&gt;\n</code></pre></p> <p>Check status of the Run: <pre><code>cryton-cli runs show &lt;run-id&gt;\n</code></pre></p> <p>Generate Run report: <pre><code>cryton-cli runs report &lt;run-id&gt;\n</code></pre></p>"},{"location":"playground/#create-your-own-scenario","title":"Create your own scenario","text":"<p>If you know what you're doing, you can try to come up with your own attack plan.</p> <p>Feel free to access the Worker container and try to find vulnerabilities and attack vectors that you could utilize in your final scenario. If the provided infrastructure is not ideal for your needs, you can also add more containers.</p> How do I access a container? <p>Generally you want to start an interactive session inside the container using: <pre><code>docker compose exec -it &lt;container_name&gt; bash\n</code></pre></p> <p>To access the Worker container use: <pre><code>docker compose exec -it cryton_worker bash\n</code></pre></p>"},{"location":"playground/#troubleshooting","title":"Troubleshooting","text":""},{"location":"playground/#unable-to-build-the-infrastructure","title":"Unable to build the infrastructure","text":"<p>Make sure the address pools and ports the playground uses are available.</p>"},{"location":"playground/#services-are-not-running-correctly","title":"Services are not running correctly","text":"<p>If you're having problems with the services (they keep restarting for example):</p> <ol> <li> <p>Shut down the running infrastructure with no timeout:     <pre><code>docker compose -f docker-compose.yml -f docker-compose.playground.yml down -t 0\n</code></pre></p> </li> <li> <p>Remove all data, volumes, images, and containers:     <pre><code>docker system prune --volumes --all --force\ndocker volumes prune --all\n</code></pre></p> </li> <li> <p>Build the Infrastructure again:     <pre><code>docker compose -f docker-compose.yml -f docker-compose.playground.yml up -d --build\n</code></pre></p> </li> </ol>"},{"location":"production/","title":"Production","text":"<p>There are some rules you should follow when deploying Cryton to a production environment.</p>"},{"location":"production/#core","title":"Core","text":""},{"location":"production/#settings","title":"Settings","text":"<p>Update these settings to not use the default values</p> <ul> <li>CRYTON_CORE_RABBIT_PASSWORD</li> <li>CRYTON_CORE_DB_PASSWORD</li> <li>CRYTON_CORE_API_SECRET_KEY</li> </ul>"},{"location":"production/#proxy","title":"Proxy","text":"<p>Hide the rest API behind a proxy with restricted access.</p> <p>Tip</p> <p>Use the officially supplied docker-compose.yml.</p>"},{"location":"production/#worker","title":"Worker","text":""},{"location":"production/#settings_1","title":"Settings","text":"<p>Update these settings to not use the default values</p> <ul> <li>CRYTON_WORKER_NAME</li> <li>CRYTON_WORKER_MODULES_DIRECTORY</li> <li>CRYTON_WORKER_MSF_RPC_PASSWORD</li> <li>CRYTON_WORKER_RABBIT_PASSWORD</li> <li>CRYTON_WORKER_EMPIRE_PASSWORD</li> </ul> <p>https://cheatsheetseries.owasp.org/cheatsheets/Docker_Security_Cheat_Sheet.html</p>"},{"location":"quick-start/","title":"Quick-start","text":"<p>In this guide, we will use Docker Compose to deploy Cryton, its prerequisites, and frontend.</p> <p>Want more deployment options?</p> <ul> <li>Installation guide (pip/pipx/Docker)</li> <li>Playground (prebuilt Docker infrastructure)</li> </ul> <p>Requirements</p> <ul> <li>Docker Compose</li> <li><code>curl</code> / <code>wget</code></li> <li>System with 2048 MB of RAM and 2 CPU cores</li> </ul> <p>Download the Compose config file</p> curlwget <pre><code>curl -O https://gitlab.ics.muni.cz/cryton/cryton/-/raw/stable/2/docker-compose.yml\n</code></pre> <pre><code>wget https://gitlab.ics.muni.cz/cryton/cryton/-/raw/stable/2/docker-compose.yml\n</code></pre> <p>and run it: <pre><code>docker compose up -d\n</code></pre></p> <p>Cryton's REST API should be accessible at http://127.0.0.1:8000 and frontend at http://127.0.0.1:8080.</p> <p>If that's not the case, make sure the ports aren't occupied by a different application.</p>"},{"location":"quick-start/#test-the-deployment","title":"Test the deployment","text":"<p>Now we want to test if the CLI, Worker, and Hive are communicating.</p> <p>Start an interactive shell in the cryton-cli container: <pre><code>docker compose exec cryton_cli bash\n</code></pre></p> <p>Register the Worker: <pre><code>cryton-cli workers create worker -d \"my local worker for testing\"\n</code></pre></p> <p>Check if the Worker is reachable (use the id from the previous command): <pre><code>cryton-cli workers health-check &lt;id&gt;\n</code></pre></p>"},{"location":"settings/","title":"Settings","text":"<p>By default, settings, logs, and other important files are stored in the application directory (<code>APP_DIRECTORY</code>) located at <code>~/.local/cryton/</code> (<code>/app/</code> in case you are in a Docker image).</p> <p>There are multiple ways to update the settings (the higher the number the higher the priority):</p> <ol> <li>YAML configuration in the application directory (<code>APP_DIRECTORY/settings.yml</code>)</li> <li>File with environment variables in the application directory (<code>APP_DIRECTORY/settings</code>)</li> <li>Temporary override using environment variables</li> <li>Temporary override using options in each CLI application</li> </ol>"},{"location":"settings/#overriding-settings","title":"Overriding settings","text":"<p>To override the settings (using environment variables), use the <code>export</code> command: <pre><code>export CRYTON_CLI_API_HOST=127.0.0.1\n</code></pre></p> <p>The environment variables must be prefixed by <code>CRYTON_</code> and are comprised of the uppercase path of the setting and with dots replaced by underscores, as in the example above for setting <code>cli.api.host</code>.</p> <p>Use <code>unset</code> to remove a variable.</p> <p>Some settings can be overridden using the CLI. Try using: <pre><code>cryton-cli --help\n</code></pre> <pre><code>cryton-hive --help\n</code></pre> <pre><code>cryton-worker --help\n</code></pre></p> Overriding settings with Docker <p></p> <p>To override a variable use the <code>-e</code> or the <code>--env-file</code> option: <pre><code>docker run -e CRYTON_CLI_API_HOST=127.0.0.1 --env-file relative/path/to/settings ...\n</code></pre></p> <p>More information can be found here.</p> Overriding settings with Docker compose <p></p> <p>Override variables in the <code>environment</code> or the <code>env_file</code> attribute: <pre><code>services\n  service:\n    environment:\n      - CRYTON_CLI_API_HOST=127.0.0.1\n    env_file:\n      - relative/path/to/settings\n</code></pre></p> <p>More information can be found here.</p> How do I change the location of the application directory <p></p> <p>Simply update the value of the <code>CRYTON_APP_DIRECTORY</code> environment variable to the path you desire. Don't forget that environment variables are not permanent.</p>"},{"location":"settings/#available-settings","title":"Available settings","text":""},{"location":"settings/#hive","title":"Hive","text":""},{"location":"settings/#debug","title":"Debug","text":"<p>Allow debug logs to be saved/displayed.</p> type default example YAML variable path Environment variable boolean false true hive.debug CRYTON_HIVE_DEBUG"},{"location":"settings/#message-timeout","title":"Message timeout","text":"<p>Timeout (in seconds) for RabbitMQ requests and messages.</p> type default example YAML variable path Environment variable int 180 300 hive.message_timeout CRYTON_HIVE_MESSAGE_TIMEOUT <p>If you choose a lower timeout value and the Worker's IP changes during runtime, the messages may timeout. This is because the Worker tries to reconnect to RabbitMQ server after two minutes of silence.</p>"},{"location":"settings/#threads-per-process","title":"Threads per process","text":"<p>Affects the number of message consumers and speed of starting and consuming Rabbit messages.</p> type default example YAML variable path Environment variable int 7 5 hive.threads_per_process CRYTON_HIVE_THREADS_PER_PROCESS"},{"location":"settings/#cpu-cores","title":"CPU cores","text":"<p>The number of CPU cores that can be utilized at the same time. This affects the speed of sending and consuming Rabbit messages.</p> <p>Set the value to <code>0</code> to use all cores.</p> type default example YAML variable path Environment variable int 3 4 hive.cpu_cores CRYTON_HIVE_CPU_CORES"},{"location":"settings/#rabbit-host","title":"Rabbit host","text":"<p>RabbitMQ server host.</p> type default example YAML variable path Environment variable string 127.0.0.1 rabbit-host hive.rabbit.host CRYTON_HIVE_RABBIT_HOST"},{"location":"settings/#rabbit-port","title":"Rabbit port","text":"<p>RabbitMQ server port.</p> type default example YAML variable path Environment variable int 5672 15672 hive.rabbit.port CRYTON_HIVE_RABBIT_PORT"},{"location":"settings/#rabbit-username","title":"Rabbit username","text":"<p>Username for RabbitMQ server login.</p> type default example YAML variable path Environment variable string cryton admin hive.rabbit.username CRYTON_HIVE_RABBIT_USERNAME"},{"location":"settings/#rabbit-password","title":"Rabbit password","text":"<p>Password for RabbitMQ server login.</p> type default example YAML variable path Environment variable string cryton admin hive.rabbit.password CRYTON_HIVE_RABBIT_PASSWORD"},{"location":"settings/#rabbit-queue-attack_response","title":"Rabbit queue - attack_response","text":"<p>Queue name for processing attack responses.</p> type default example YAML variable path Environment variable string cryton.attack.response cryton.attack.response.id hive.rabbit.queues.attack_response CRYTON_HIVE_RABBIT_QUEUES_ATTACK_RESPONSE"},{"location":"settings/#rabbit-queue-agent_response","title":"Rabbit queue - agent_response","text":"<p>Queue name for processing agent responses.</p> type default example YAML variable path Environment variable string cryton.agent.response cryton.agent.response.id hive.rabbit.queues.agent_response CRYTON_HIVE_RABBIT_QUEUES_AGENT_RESPONSE"},{"location":"settings/#rabbit-queue-event_response","title":"Rabbit queue - event_response","text":"<p>Queue name for processing event responses.</p> type default example YAML variable path Environment variable string cryton.event.response cryton.event.response.id hive.rabbit.queues.event_response CRYTON_HIVE_RABBIT_QUEUES_EVENT_RESPONSE"},{"location":"settings/#rabbit-queue-control_request","title":"Rabbit queue - control_request","text":"<p>Queue name for processing control requests.</p> type default example YAML variable path Environment variable string cryton.control.request cryton.control.request.id hive.rabbit.queues.control_request CRYTON_HIVE_RABBIT_QUEUES_CONTROL_REQUEST"},{"location":"settings/#database-host","title":"Database host","text":"<p>Postgres server host.</p> type default example YAML variable path Environment variable string 127.0.0.1 database-host hive.database.host CRYTON_HIVE_DATABASE_HOST"},{"location":"settings/#database-port","title":"Database port","text":"<p>Postgres server port.</p> type default example YAML variable path Environment variable int 5432 15432 hive.database.port CRYTON_HIVE_DATABASE_PORT"},{"location":"settings/#database-name","title":"Database name","text":"<p>Postgres database name to connect to.</p> type default example YAML variable path Environment variable string cryton custom hive.database.name CRYTON_HIVE_DATABASE_NAME"},{"location":"settings/#database-username","title":"Database username","text":"<p>Username for Postgres server login.</p> type default example YAML variable path Environment variable string cryton admin hive.database.username CRYTON_HIVE_DATABASE_USERNAME"},{"location":"settings/#database-password","title":"Database password","text":"<p>Password for Postgres server login.</p> type default example YAML variable path Environment variable string cryton admin hive.database.password CRYTON_HIVE_DATABASE_PASSWORD"},{"location":"settings/#api-secret-key","title":"API secret key","text":"<p>Key (64 chars) used by the REST API for cryptographic signing. More information can be found here.</p> type default example YAML variable path Environment variable string cryton XF37...6HB3 hive.api.secret_key CRYTON_HIVE_API_SECRET_KEY"},{"location":"settings/#api-allowed-hosts","title":"API allowed hosts","text":"<p>Domain names that the site can serve. More information can be found here.</p> type default example YAML variable path Environment variable list of strings separated by space \"*\" host1 host2 hive.api.allowed_hosts CRYTON_HIVE_API_ALLOWED_HOSTS"},{"location":"settings/#worker","title":"Worker","text":""},{"location":"settings/#name","title":"Name","text":"<p>Unique name used for Worker identification and communication.</p> type default example YAML variable path Environment variable string worker attacker worker.name CRYTON_WORKER_NAME"},{"location":"settings/#debug_1","title":"Debug","text":"<p>Allow debug logs to be saved/displayed.</p> type default example YAML variable path Environment variable boolean false true worker.debug CRYTON_WORKER_DEBUG"},{"location":"settings/#consumer-count","title":"Consumer count","text":"<p>The number of consumers used for Rabbit and internal message processing.</p> type default example YAML variable path Environment variable int 7 3 worker.consumer_count CRYTON_WORKER_CONSUMER_COUNT"},{"location":"settings/#max-retries","title":"Max retries","text":"<p>The number of retries before shuttling down, when the connection to RabbitMQ is lost.</p> type default example YAML variable path Environment variable int 3 5 worker.max_retries CRYTON_WORKER_MAX_RETRIES"},{"location":"settings/#rabbit-host_1","title":"Rabbit host","text":"<p>RabbitMQ server host.</p> type default example YAML variable path Environment variable string 127.0.0.1 rabbit-host worker.rabbit.host CRYTON_WORKER_RABBIT_HOST"},{"location":"settings/#rabbit-port_1","title":"Rabbit port","text":"<p>RabbitMQ server port.</p> type default example YAML variable path Environment variable int 5672 15672 worker.rabbit.port CRYTON_WORKER_RABBIT_PORT"},{"location":"settings/#rabbit-username_1","title":"Rabbit username","text":"<p>Username for RabbitMQ server login.</p> type default example YAML variable path Environment variable string cryton admin worker.rabbit.username CRYTON_WORKER_RABBIT_USERNAME"},{"location":"settings/#rabbit-password_1","title":"Rabbit password","text":"<p>Password for RabbitMQ server login.</p> type default example YAML variable path Environment variable string cryton admin worker.rabbit.password CRYTON_WORKER_RABBIT_PASSWORD"},{"location":"settings/#empire-host","title":"Empire host","text":"<p>Empire server host.</p> type default example YAML variable path Environment variable string 127.0.0.1 empire-host worker.empire.host CRYTON_WORKER_EMPIRE_HOST"},{"location":"settings/#empire-port","title":"Empire port","text":"<p>Empire server port.</p> type default example YAML variable path Environment variable int 1337 11337 worker.empire.port CRYTON_WORKER_EMPIRE_PORT"},{"location":"settings/#empire-username","title":"Empire username","text":"<p>Username for Empire server login.</p> type default example YAML variable path Environment variable string cryton admin worker.empire.username CRYTON_WORKER_EMPIRE_USERNAME"},{"location":"settings/#empire-password","title":"Empire password","text":"<p>Password for Empire server login.</p> type default example YAML variable path Environment variable string cryton admin worker.empire.password CRYTON_WORKER_EMPIRE_PASSWORD"},{"location":"settings/#metasploit-host","title":"Metasploit host","text":"<p>Metasploit RPC server host.</p> type default example YAML variable path Environment variable string 127.0.0.1 metasploit-host worker.metasploit.host CRYTON_WORKER_METASPLOIT_HOST"},{"location":"settings/#metasploit-port","title":"Metasploit port","text":"<p>Metasploit RPC server port.</p> type default example YAML variable path Environment variable int 55553 55554 worker.metasploit.port CRYTON_WORKER_METASPLOIT_PORT"},{"location":"settings/#metasploit-ssl","title":"Metasploit SSL","text":"<p>Use SSL to connect to Metasploit RPC server.</p> type default example YAML variable path Environment variable boolean true false worker.metasploit.ssl CRYTON_WORKER_METASPLOIT_SSL"},{"location":"settings/#metasploit-username","title":"Metasploit username","text":"<p>Username for Metasploit RPC server login.</p> type default example YAML variable path Environment variable string cryton admin worker.metasploit.username CRYTON_WORKER_METASPLOIT_USERNAME"},{"location":"settings/#metasploit-password","title":"Metasploit password","text":"<p>Password for Metasploit RPC server login.</p> type default example YAML variable path Environment variable string cryton admin worker.metasploit.password CRYTON_WORKER_METASPLOIT_PASSWORD"},{"location":"settings/#metasploit-require","title":"Metasploit require","text":"<p>Require Metasploit connection on startup. Waits forever. In case of wrong credentials Worker shutdowns.</p> type default example YAML variable path Environment variable boolean false true worker.metasploit.require CRYTON_WORKER_METASPLOIT_REQUIRE"},{"location":"settings/#cli","title":"CLI","text":""},{"location":"settings/#debug_2","title":"Debug","text":"<p>Return raw responses from the REST API.</p> type default example YAML variable path Environment variable boolean false true cli.debug CRYTON_CLI_DEBUG"},{"location":"settings/#timezone","title":"Timezone","text":"<p>Timezone used for scheduling (for example when scheduling a Run). </p> <p>Set the value to <code>DEFAULT</code> to use your system timezone.</p> type default example YAML variable path Environment variable string DEFAULT Europe/Prague cli.timezone CRYTON_CLI_TIMEZONE"},{"location":"settings/#api-host","title":"API host","text":"<p>Cryton Hive's REST API address.</p> type default example YAML variable path Environment variable string 127.0.0.1 cryton-hive cli.api.host CRYTON_CLI_API_HOST"},{"location":"settings/#api-port","title":"API port","text":"<p>Cryton Hive's REST API port.</p> type default example YAML variable path Environment variable int 8000 8008 cli.api.port CRYTON_CLI_API_PORT"},{"location":"settings/#api-ssl","title":"API SSL","text":"<p>Use SSL to connect to Cryton Hive's REST API.</p> type default example YAML variable path Environment variable boolean false true cli.api.ssl CRYTON_CLI_API_SSL"},{"location":"design-phase/","title":"Creating a scenario","text":""},{"location":"design-phase/#what-is-a-scenario","title":"What is a scenario","text":"TLDR <p>An attack scenario (also called plan), is divided into different stages. </p> <p>Every stage has its trigger (run at a specific time), as this is often required by an exercise. </p> <p>And finally, each stage consists of attack steps, which are organized in a non-binary tree.</p> <p>Let's start with the description of the attack scenario. Scenario and plan can be used interchangeably - plan is just  the name of the element in the formal description of the attack scenario.</p> <p>An attack scenario is a sequence of steps with some common objective. This objective may be data ex-filtration, access to  target systems, denial of service, or any other harmful action. For some exercises, every attack should be  divisible into different stages. Imagine you have to attack infrastructure with multiple machines - each machine can  be a separate stage. Or you want to attack according to some kill-chain, e.g. the first stage would be scanning of the  infrastructure, the second is brute force attack on credentials to found systems, etc.</p> <p>The last and most important element of the plan description is the step. This is the execution of an attack script or tool  against the target. A step can be running a Metasploit exploit, or running a Nmap scan. Steps are dependent on each other,  and so they create an execution tree, where each of them has set the list of successors based on some condition. The  condition may be a success or a string value returned by its predecessor.</p> <p>The lifecycle of the attack scenario in the Cryton context can be seen in the following picture: </p>"},{"location":"design-phase/#what-is-a-plan-template","title":"What is a plan template","text":"<p>The first step in designing a plan is creating its template. A template is basically a plan object written in YAML - a description of the actions required to run during attack execution. </p> <p>The template itself is not a fully described attack scenario. The structure of the attack (execution tree) is correct, but there are still unfilled places (e.g. IP addresses of targets or other inventory variables). This way a template can be designed before knowing these details and used in multiple different environments.</p> <p>An abstract plan can look like this: <pre><code>Stage 1\n  Step 1\n  Step 2\nStage 2\n  Step 3\n</code></pre></p> Use JSON schema for real-time template validation <p>Import the JSON schema located on this address <code>https://gitlab.ics.muni.cz/cryton/cryton/-/raw/master/cryton.schema.json</code> to your favourite editor.</p> <ul> <li>PyCharm guide</li> <li>VS code guide</li> </ul>"},{"location":"design-phase/#what-is-a-plan-instance","title":"What is a plan instance","text":"<p>While Template contains unfilled variables (therefore the name \"template\"), Plan instance fills these things in by combining the template with an inventory file. This file contains all information that needs to be filled in the template. After instantiation, everything is ready to create a Run.</p> <p>Warning</p> <p>After creating the Plan instance only the Execution variables can be left unfilled and must be explicitly defined as a string.</p>"},{"location":"design-phase/#inventory-files","title":"Inventory files","text":"<p>When you create a template, you don't always have all the information you need for directly executing it. Or you simply want to make it reusable for other people in their environment. To provide variability in templates we support inventory files. These inventory files can be used to provide variable values to templates using Jinja language.</p> <p>A valid Plan file is written in YAML format with variables in the Jinja format, which have to be replaced during the instantiation process.</p> <p>Inventory file example: <pre><code>names:\n  alpha: 127.0.0.1\n</code></pre></p> <p>Template example: <pre><code>target: {{ names.alpha }}\n</code></pre></p>"},{"location":"design-phase/plan/","title":"Plan","text":"<p>Plan is the basic unit of an attack scenario. It holds settings, basic information about the scenario, and its stages.</p> <p></p> <p>Example of defining a plan using YAML: <pre><code>name: my-plan\nmetadata:\n  description: This is an example description\nsettings:\n  separator: |\ndynamic: false\nstages: {}\n</code></pre></p> <p>To better understand what each argument means and defines, here is a short description:</p> <ul> <li>name - Sets the name of the plan.</li> <li>metadata - An undefined dictionary containing metadata. The <code>description</code> parameter is just an example, you can define your own.</li> <li>settings - Settings used for the entire plan. See the settings section for more details.</li> <li>dynamic - Whether the plan will be static or the user can temper with it afterward. More information can be found here.</li> <li>stages - stages to be executed during the plan's execution.</li> </ul>"},{"location":"design-phase/plan/#settings","title":"Settings","text":""},{"location":"design-phase/plan/#separator","title":"Separator","text":"<p>If you don't want to use <code>.</code> as a separator in output sharing, you can use the <code>separator</code> parameter.</p> <p>Example of defining a custom separator: <pre><code>name: my-plan\nsettings:\n  separator: \"|\"\nstates: {}\n</code></pre></p>"},{"location":"design-phase/stage/","title":"Stage","text":"<p>A stage is a unit defined by a target and its trigger (for example time of start). It holds attack steps that are related to each other.</p> <p></p> <p>Example of defining a stage using YAML: <pre><code>my-stage:\n  metadata:\n    description: This is an example description\n  type: delta\n  arguments:\n    minutes: 5\n  depends_on:\n    - previous-stage\n  steps: {}\n</code></pre></p> <p>The name of the stage is defined by the root element that holds it. In this case it's <code>my-stage</code> (the name must be unique for each stage and step).</p> <p>To better understand what each argument means and defines, here is a short description (sub-arguments are described in depth in their section):</p> <ul> <li>metadata - An undefined dictionary containing metadata. The <code>description</code> parameter is just an example, you can define your own.</li> <li>type - Which trigger is used to determine when to start the stage. For more details see the triggers section.</li> <li>arguments - Arguments specific for each type of trigger. For more details see the triggers section.</li> <li>depends_on - If the stage depends on other stages, we can tell it to wait until the other stages are finished. For more details see the dependencies section.</li> <li>steps - Steps that will be executed during the stage's execution.</li> </ul>"},{"location":"design-phase/stage/#triggers","title":"Triggers","text":""},{"location":"design-phase/stage/#immediate","title":"Immediate","text":"<p>Run the stage immediately. No arguments are supported. <pre><code>my-stage:\n  type: immediate\n  steps: {}\n</code></pre></p> <p>If no type is defined, it is used as the default option. <pre><code>my-stage:\n  steps: {}\n</code></pre></p>"},{"location":"design-phase/stage/#delta","title":"Delta","text":"<p>Once the plan is started, wait for the specified time before starting the stage. <pre><code>my-stage:\n  type: delta\n  arguments:\n    hours: 1\n  steps: {}\n</code></pre></p> <p>Arguments:</p> Argument Default Description days 0 Wait for n days. hours 0 Wait for n hours. minutes 0 Wait for n minutes. seconds 0 Wait for n seconds. <p>At least one argument is required.</p>"},{"location":"design-phase/stage/#time","title":"Time","text":"<p>Schedule execution for a specific date and time. <pre><code># This stage would be executed on the day the plan was executed at 08:00:00 in Europe/Prague timezone\ntype: time\narguments:\n  timezone: Europe/Prague\n  hour: 8\n</code></pre></p> <p>Arguments:</p> Argument Default Description timezone UTC Timezone to use. year Current year Year in which stage should be executed. month Current month Month in which stage should be executed. day Current day Day in which stage should be executed. hour 0 Hour in which stage should be executed. minute 0 Minute in which stage should be executed. second 0 Second in which stage should be executed. <p>At least one argument is required (excluding the timezone).</p>"},{"location":"design-phase/stage/#http","title":"HTTP","text":"<p>The stage will be executed once the specific data are received in the HTTP request (GET/POST) on the listener. <pre><code>type: http\narguments:\n  host: localhost\n  port: 8082\n  routes:\n    - path: /index\n      method: GET\n      parameters:\n        - name: parameter\n          value: value\n  steps: {}\n</code></pre></p> <p>Arguments:</p> Argument Default Description host 0.0.0.0 Address used to serve the listener on the Worker machine. port Port used to serve the listener on the Worker machine. routes List of routes the listener will check for requests. <p>Arguments for the routes parameter:</p> Argument Default Description path Request's path. method Request's allowed method. parameters Request's required parameters. <p>Arguments for the parameters parameter:</p> Argument Default Description name Parameter's name. value Parameter's value."},{"location":"design-phase/stage/#metasploit","title":"Metasploit","text":"<p>Metasploit trigger runs an exploit the same as the Metasploit module. The stage will be executed once the metasploit module has finished successfully. More information can be found here. <pre><code>type: metasploit\narguments:\n  module_name: scanner/ssh/ssh_login\n  datastore:\n    RHOSTS: 127.0.0.1\n    USERNAME: vagrant\n    PASSWORD: vagrant\n  steps: {}\n</code></pre></p>"},{"location":"design-phase/stage/#dependencies","title":"Dependencies","text":"<p>Creating time-based triggers can be limiting, since the stage itself can take more time than expected. To ensure that the stages will execute in the correct order, you can check if a stage has already finished. This way you can ensure that the output from other stages is available.</p> <pre><code>my-stage:\n  depends_on:\n    - other-stage\n  steps: {}\n</code></pre>"},{"location":"design-phase/step/","title":"Step","text":"<p>Step is equal to one action - module execution. Every step can have a successor(s) whose execution will follow according to the provided conditions.</p> <p>Example of defining a step using YAML: <pre><code>my-step:\n  metadata:\n    description: This is an example description\n  is_init: true\n  module: module-name\n  arguments: {}\n  output:\n    alias: credentials-from-localhost\n    replace:\n      \"^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}$\": removed-ip\n    mapping:\n      - from: auth_token\n        to: token\n  next:\n    - type: state\n      value: finished\n      step: other-steps-name\n</code></pre></p> <p>The name of the step is defined by the root element that holds it. In this case it's <code>my-step</code> (the name must be unique for each stage and step).</p> <p>To better understand what each argument means and defines, here is a short description (sub-arguments are described in depth in their section):</p> <ul> <li>metadata - An undefined dictionary containing metadata. The <code>description</code> parameter is just an example, you can define your own.</li> <li>is_init - Defines if the step is initial (is executed once the stage has started) and is not a successor.</li> <li>module - Name of the module to use. See modules for more information.</li> <li>arguments - Dictionary containing arguments that will be passed to the module. See modules for more information.</li> <li>output - If you want to modify/share the step's output later, you can do so with this parameter. For more details check out the output sharing section.</li> <li>next - Defines Step's successors, more info below.</li> </ul>"},{"location":"design-phase/step/#conditional-execution","title":"Conditional execution","text":"<p>To execute an attack scenario according to some execution tree, steps provide a way to execute other steps according to the specified conditions.</p> <p>This can be done with the <code>next</code> parameter, which contains an array of objects with the following parameters:</p> parameter type Description <code>type</code> string Defines which type of output to compare. <code>value</code> string or array of strings Value used for comparison. <code>step</code> string or array of strings Name(s) of the successor(s). <p>The following are types of outputs together with the descriptions of their possible values:</p> Type Value Description <code>state</code> <code>finished</code>, <code>failed</code>, <code>error</code> Match the <code>state</code> of the step. <code>serialized_output</code> Regular expression (<code>^my_regex.*</code>) Match regex in <code>serialized_output</code> of the step. <code>output</code> Regular expression (<code>^my_regex.*</code>) Match regex in <code>output</code> of the step. <code>any</code> Value must be omitted Run successor(s) in any case."},{"location":"design-phase/step/#examples","title":"Examples:","text":"<pre><code>my-step:\n  next:\n  - type: state\n    value: finished\n    step: step-to-execute\n</code></pre> <pre><code>my-step:\n  next:\n  - type: serialized_output\n    value: \n      - admin\n      - root\n    step: \n      - step-to-execute-1\n      - step-to-execute-2\n</code></pre> <pre><code>my-step:\n  next:\n  - type: any\n    step: step-to-execute\n</code></pre>"},{"location":"design-phase/step/#output-sharing","title":"Output sharing","text":"<p>Output sharing is a feature that allows sharing of the serialized_output between steps. The data can be also shared across stages or even from stages.</p>"},{"location":"design-phase/step/#going-through-the-data","title":"Going through the data","text":"<p>To go through the serialized data we use a modified version of a dot notation with the following rules:</p> <ul> <li>To access an item inside an object (dictionary) use a separator - <code>.</code> by default</li> <li>To access an item inside an array (list) specify an index <code>[integer]</code> (regex representation: <code>^\\[[0-9]+]$</code>)</li> </ul> <p>For example, imagine the following object (dictionary): <pre><code>{\"credentials\": [{\"username\": \"admin\", \"password\": \"securePassword\"}]}\n</code></pre> If we wanted to access it and get the password for the admin user, we would use <code>credentials[0].password</code> which would return <code>securePassword</code>.</p>"},{"location":"design-phase/step/#accessing-the-data","title":"Accessing the data","text":"<p>We use the <code>$</code> character to indicate we want to use data from another step. Then we insert the name of the desired step, and finally use the dot notation mentioned before.</p> <p>In the template, we would define it like so: <pre><code>get-credentials:  # step with the wanted data\n  module: my-module\n  arguments: {}\n\nuse-password:  # step that needs the data\n  module: my-other-module\n  arguments:\n    password: $get-credentials.credentials[0].password\n</code></pre></p> <p>Output sharing is resolved only inside the <code>arguments</code> parameter in step.</p>"},{"location":"design-phase/step/#output-alias","title":"Output alias","text":"<p>By default, you can access step's data using its name. Additionally, you can define an alias as an alternative. This can be useful since you can assign the same alias to multiple steps.</p> How is the data handled <p>The serialized output from each step is merged into a single object. In case the data exists in multiple steps, the latest data gets used.</p> <p>Imagine we have two steps with the same alias.</p> <p>The first one finished with the following output: <pre><code>{\"alpha\": \"blue\", \"whiskey\": \"red\"}\n</code></pre></p> <p>The second step finished a minute later with the following output: <pre><code>{\"whiskey\": \"green\", \"charlie\": \"yellow\"}\n</code></pre></p> <p>The following data would be available to the step accessing the alias: <pre><code>{\"alpha\": \"blue\", \"whiskey\": \"green\", \"charlie\": \"yellow\"}\n</code></pre></p> <p>For example: <pre><code>get-credentials:\n  module: my-module\n  arguments: {}\n  output:\n    alias: my-super-alias\n\nuse-password:\n  module: my-other-module\n  arguments:\n    password: $my-super-alias.credentials[0].password\n</code></pre></p>"},{"location":"design-phase/step/#parent-alias","title":"Parent alias","text":"<p>Furthermore, there is a special alias named parent, which is a shortcut for the step (parent) that executed the current step. <pre><code>get-credentials:\n  module: my-module\n  arguments: {}\n  next:\n    type: any\n    step: use-password\n\nuse-password:\n  module: my-other-module\n  arguments:\n    password: $parent.credentials[0].password\n</code></pre></p>"},{"location":"design-phase/step/#output-mapping","title":"Output mapping","text":"<p>Sometimes you do not care from which step you receive information, which is why the output alias exists. However, what if the data is saved under a different name (<code>token</code> vs. <code>auth_token</code>)? For this reason, there is the output mapping. <pre><code>step-a: # Returns 'token'\n  module: my-module\n  arguments: {}\n  output:\n    alias: steal\n    mapping:\n      - from: token\n        to: stolen_token\n\nstep-b: # Returns 'auth_token'\n  module: my-other-module\n  arguments: {}\n  output:\n    alias: steal\n    mapping:\n      - from: auth_token\n        to: stolen_token\n\nstep-c:\n  module: my-other-other-module\n  arguments:\n    token: $steal.stolen_token\n</code></pre></p>"},{"location":"design-phase/step/#output-replacing","title":"Output replacing","text":"<p>In case you want to replace some parts of your output, you can define a dictionary of rules (regexes) and strings to replace the matches with. Keep in mind, that the rules are applied in order.</p> <p>Here is an example of matching IPv4 and replacing it with <code>removed-ip</code>: <pre><code>my-step:\n  module: my-module\n  arguments: {}\n  output:\n    replace:\n      \"^((25[0-5]|(2[0-4]|1\\d|[1-9]|)\\d)\\.?\\b){4}$\": removed-ip\n</code></pre></p>"},{"location":"design-phase/step/#execution-variables","title":"Execution variables","text":"<p>To assign different values for each plan execution in a Run, you can use execution variables.</p> <p>To define an execution variable, use Jinja (with some tweaks) wrapped in single quotes: <pre><code>my-step:\n  module: my-module\n  arguments:\n    target: '{{ my_jinja_variable }}'\n</code></pre></p> <p>Before you execute the run, upload the variable(s). See CLI documentation for more information.</p> <p>Example of a file with execution variables: <pre><code>variable: localhost\nnested:\n  variable: value\nvariables:\n  - var1\n  - var2\n</code></pre></p>"},{"location":"design-phase/step/#limitations","title":"Limitations","text":"<ul> <li>Execution variables must be wrapped in single quotes     <pre><code>foo: '{{ variable }}'\n</code></pre></li> <li>Execution variables are resolved only for the <code>arguments</code> parameter in the step</li> <li>Currently, there is support for simple and nested variables only:     <pre><code>foo: '{{ variable }}'\n</code></pre> <pre><code>foo: '{{ nested.variable }}'\n</code></pre> <pre><code>foo: '{{ variable[index] }}'\n</code></pre> <pre><code>foo: '{{ nested.variable[index] }}'\n</code></pre></li> <li>If you want to use more Jinja goodies, use the raw block:     <pre><code>foo: {% raw %} '{{ variable + 14 }}' {% endraw %}\n</code></pre></li> <li>If a variable is missing, the step errors out once it's started</li> </ul>"},{"location":"development/","title":"Development","text":""},{"location":"development/#environment-setup","title":"Environment setup","text":"<p>First, we have to set up the development environment. This is done using Poetry.</p> <p>Requirements</p> <ul> <li>Python &gt;=3.11,&lt;3.13</li> <li>Poetry</li> <li>Docker Compose</li> </ul> <p>Clone the repository: <pre><code>git clone https://gitlab.ics.muni.cz/cryton/cryton.git\n</code></pre></p> <p>Go to the correct directory: <pre><code>cd cryton\n</code></pre></p> <p>Start the prerequisites: <pre><code>docker compose -f docker-compose.prerequisites.yml up -d\n</code></pre></p> Clean up and rebuild the prerequisites <p>Warning</p> <p>The following commands removes all images and volumes. Make sure you know what you're doing!</p> <pre><code>docker compose -f docker-compose.prerequisites.yml down -t 0 &amp;&amp; docker system prune --all --force &amp;&amp; docker volume prune --all --force &amp;&amp; docker compose -f docker-compose.prerequisites.yml up -d \n</code></pre> Unable to access the database with Pycharm <p>To be able to access the DB through the PgBouncer, add the following variable to the service definition in the Compose configuration: </p> <p><code>PGBOUNCER_IGNORE_STARTUP_PARAMETERS: extra_float_digits</code>.</p> <p>Install Cryton: <pre><code>poetry install --all-extras --with docs\n</code></pre></p> <p>To spawn a shell use: <pre><code>poetry shell\n</code></pre></p>"},{"location":"development/#usage","title":"Usage","text":"<p>Run Hive: <pre><code>poetry run cryton-hive start --migrate-database\n</code></pre></p> <p>Run Worker: <pre><code>poetry run cryton-worker start\n</code></pre></p> <p>Run CLI: <pre><code>poetry run cryton-cli\n</code></pre></p> <p>Link to the usage.</p>"},{"location":"development/#testing","title":"Testing","text":""},{"location":"development/#pytest","title":"Pytest","text":"<pre><code>pytest --cov=cryton tests/unit/ --cov-config=.coveragerc-unit --cov-report html\n</code></pre> <pre><code>pytest --cov=cryton tests/integration/ --cov-config=.coveragerc-integration --cov-report html\n</code></pre> Run specific test <pre><code>pytest my_test_file.py::MyTestClass::my_test\n</code></pre>"},{"location":"development/#tox","title":"tox","text":"<p>Use in combination with pyenv.</p> <pre><code>tox -- tests/unit/ --cov=cryton --cov-config=.coveragerc-unit\n</code></pre> <pre><code>tox -- tests/integration/ --cov=cryton --cov-config=.coveragerc-integration\n</code></pre> <p>Use the provided <code>ci-python</code> image to get an isolated environment.</p>"},{"location":"development/#e2e","title":"E2E","text":"<p>E2E tests will test Hive, Worker, and CLI together.</p> <p>Build playground with modifications for E2E tests: <pre><code>docker compose -f docker-compose.yml -f docker-compose.playground.yml -f docker-compose.dev.yml -f docker-compose.e2e.yml up -d --build\n</code></pre></p> <p>Export variables for E2E tests: <pre><code>export CRYTON_E2E_WORKER_ADDRESS=\"192.168.90.11\"\n</code></pre></p> <p>Run the tests: <pre><code>pytest tests/e2e/\n</code></pre></p>"},{"location":"development/#django-related","title":"Django related","text":""},{"location":"development/#custom-script-setup-with-django","title":"Custom script setup with Django","text":"<pre><code>import os\nos.environ.setdefault(\"DJANGO_SETTINGS_MODULE\", \"cryton.hive.settings\")\nimport django\ndjango.setup()\n</code></pre>"},{"location":"development/#apply-migrations","title":"Apply migrations","text":"<pre><code>cryton-hive migrate\n</code></pre>"},{"location":"development/#generate-migrations","title":"Generate migrations","text":"<pre><code>cryton-hive makemigrations cryton_app\n</code></pre>"},{"location":"development/#build-a-docker-image","title":"Build a Docker image","text":"<p>If you want to build a custom Docker image, clone the repository, and go into it: <pre><code>git clone https://gitlab.ics.muni.cz/cryton/cryton.git\ncd cryton\n</code></pre></p> <p>Build the image: <pre><code>docker build --tag &lt;image-tag&gt; --target production --file &lt;dockerfile&gt; .\n</code></pre></p>"},{"location":"development/#documentation","title":"Documentation","text":"<p>Serve the documentation locally: <pre><code>mkdocs serve -a localhost:8002\n</code></pre></p>"},{"location":"development/#generate-cli-documentation","title":"Generate CLI documentation","text":"<p>Install Cryton CLI and run <code>cryton-cli generate-docs doc.md</code>.</p>"},{"location":"development/#generate-template-json-schema","title":"Generate template JSON schema","text":"<p>Install Cryton Hive and run <code>cryton-hive generate-schema</code>.</p>"},{"location":"development/#marking-changesnew-features","title":"Marking changes/new features","text":"<p>Use the following to mark a new feature: <pre><code>[:octicons-tag-24: 2.1.0](https://gitlab.ics.muni.cz/cryton/cryton/-/releases/2.1.0){target=\"_blank\"}\n</code></pre></p>"},{"location":"development/#rest-api-documentation-generation","title":"REST API documentation generation","text":"<ul> <li>Install the swagger-markdown tool</li> <li>Download the schema from http://127.0.0.1:8000/api/schema/</li> <li>Run <code>swagger-markdown -i path/to/swagger-schema.yml</code>.</li> </ul>"},{"location":"development/#useful-links","title":"Useful links","text":"<ul> <li>MkDocs Wiki (Third-party themes, recipes, plugins and more)</li> <li>Best-of-MkDocs (Curated list of themes, plugins and more)</li> </ul>"},{"location":"development/#known-issues","title":"Known issues","text":"<p>Using the variable <code>config.site_url</code> on localhost will provide a complete and correct path. However, we are using mike for versioning and the variable on the production deployment will miss a slash (<code>/</code>) at the end.</p>"},{"location":"development/#guidelines","title":"Guidelines","text":""},{"location":"development/#used-technology-versions","title":"Used technology versions","text":"<p>Make sure the tools' versions we use are supported:</p> <ul> <li>https://www.postgresql.org/support/versioning/</li> <li>https://devguide.python.org/versions/</li> </ul>"},{"location":"development/#writing-tests","title":"Writing tests","text":"<p>This guide simplifies and pinpoints the most important points.</p> <p>For in-app testing, we are using unit/integration tests written using the Pytest library.</p> <p>Unit tests are meant to test a specific method/function in an isolated environment (using mocking) while  the integration tests check if a unit (method/function) can run even without being isolated. End-to-end tests are  testing if all the functionality works across the whole Cryton toolset.</p> <ul> <li>Settings for Pytest can be found in a pyproject.toml file</li> <li>Tests (that test the same code part/class) are grouped using classes</li> <li>Each class that works with the Django DB has to be marked with <code>@pytest.mark.django_db</code></li> <li>Each class should be patched to use the test logger if possible (testing logger)</li> <li>Unit tests shouldn't interact with the DB. </li> <li>Use the <code>model_bakery</code> library instead of mocking the DB interactions for the integration tests</li> <li>For easier mocking, each test class should have a <code>path</code> class variable. If we are testing a class  in <code>path/to/module.py</code>, then the path variable will be <code>path = \"path.to.module\"</code>. To mock we simply use  <code>mocker.patch(self.path + \".&lt;method_to_mock&gt;\")</code>.</li> <li>We are using the mocker library instead of the unittest.mock.Mock.</li> <li>Each test method starts with the <code>test_</code> prefix.</li> <li>Each fixture method starts with the <code>f_</code> prefix.</li> <li>When using parametrize, the created parameters must have the <code>p_</code> prefix.</li> </ul> <p>A test should follow the following structure. <pre><code>import pytest\n\nclass TestUnitName:\n    path = \"path.to.patch.MyClass\"\n\n    @pytest.fixture\n    def f_to_patch(self, mocker):\n        return mocker.patch(f\"{self.path}.to_patch\")\n\n    @pytest.mark.parametrize(\n        \"p_to_parametrize\",\n        [\n        ]\n    )\n    def test_to_test(self, f_to_patch, p_to_parametrize):\n        # Arrange - set everything needed for the test\n\n        # Mock - mock everything needed to isolate your test\n\n        # Act - trigger your code unit\n\n        # Assert - assert the outcome is exactly as expected to avoid any unpleasant surprises later\n        pass\n</code></pre></p>"},{"location":"development/#docker-images","title":"Docker images","text":""},{"location":"development/#production-base","title":"production-base","text":"<p>Image used for building Python applications.</p> <p>Build it: <pre><code>docker build --tag registry.gitlab.ics.muni.cz:443/cryton/cryton/production-base:$(git rev-parse HEAD) --tag registry.gitlab.ics.muni.cz:443/cryton/cryton/production-base:latest docker/production-base/\n</code></pre></p> <p>Push it: <pre><code>docker push --all-tags registry.gitlab.ics.muni.cz:443/cryton/cryton/production-base\n</code></pre></p>"},{"location":"development/#ci-python","title":"ci-python","text":"<p>To get the same environment as in the CI/CD pipeline, use the provided <code>ci-python</code> image.</p> <p>Build it: <pre><code>docker build --tag registry.gitlab.ics.muni.cz:443/cryton/cryton/ci-python:$(git rev-parse HEAD) --tag registry.gitlab.ics.muni.cz:443/cryton/cryton/ci-python:latest docker/ci-python/\n</code></pre></p> <p>Push it: <pre><code>docker push --all-tags registry.gitlab.ics.muni.cz:443/cryton/cryton/ci-python\n</code></pre></p>"},{"location":"development/frontend/","title":"Front-end","text":""},{"location":"development/frontend/#installation","title":"Installation","text":"<p>Requirements</p> <ul> <li>npm</li> </ul> <p>Clone the repository: <pre><code>git clone https://gitlab.ics.muni.cz/cryton/cryton-frontend.git\ncd cryton-frontend\n</code></pre></p> <p>Install the dependencies: <pre><code>npm install\n</code></pre></p> <p>Serve the app:</p> TestingProduction <pre><code>ng serve --port 8080\n</code></pre> <pre><code>ng serve --prod --port 8080\n</code></pre> <p>Use <code>ng serve</code> only for development/testing. In a real production environment use either Docker installation or a production build deployed on a production-ready web server (for example Nginx).</p> Build the app <p>You can find the build in the /dist folder.</p> TestingProduction <pre><code>npm run build\n</code></pre> <pre><code>npm run build-prod\n</code></pre>"},{"location":"development/frontend/#usage","title":"Usage","text":"<p>Start a development server: <pre><code>npm start\n</code></pre></p> <p>The app will refresh itself when the project changes.</p> <p>We use Husky to run pre-commit hooks</p> <ul> <li>Code formatting with Prettier.</li> <li>Linting with ESLint.</li> <li>Running unit tests with Karma.</li> </ul>"},{"location":"development/frontend/#build-a-docker-image","title":"Build a Docker image","text":"<p>If you want to build a Docker image, switch to the correct directory: <pre><code>cd cryton-frontend\n</code></pre></p> <p>Build the image: <pre><code>docker build -t &lt;image-name&gt; .\n</code></pre></p> <p>Test it: <pre><code>docker run -p 127.0.0.1:8080:80 --rm &lt;image-name&gt;\n</code></pre></p>"},{"location":"development/modules/","title":"Modules","text":"<p>On this page, we will discuss primarily modules creation. If you want to contribute to the official project repository, make sure you follow the instructions in the development section first.</p> <p>Modules are namespace packages in the <code>cryton.modules</code> namespace.</p> <p>Once Worker receives an execution request, it:</p> <ul> <li>imports the specified module (in case it exists)</li> <li>validates the input using JSON Schema 2020-12 (specified in the <code>Module.SCHEMA</code> parameter)</li> <li>checks requirements (using the <code>Module.check_requirements</code> method)</li> <li>runs the module with the supplied arguments (using the <code>Module.execute</code> method)</li> <li>saves the module output</li> </ul> <p>In order to achieve this, there are some rules:</p> <ul> <li>module is a namespace package</li> <li>the namespace package contains <code>module.py</code> file</li> <li>the <code>module.py</code> file contains class called <code>Module</code></li> <li>the <code>Module</code> class inherits from <code>cryton.lib.utility.module.ModuleBase</code></li> <li>the <code>Module</code> class implements all abstract methods from the <code>ModuleBase</code></li> <li>the <code>Module</code> class overrides the <code>SCHEMA</code> class variable (see JSON Schema)</li> <li>the <code>Module</code> class overrides the <code>ModuleBase.execute</code> method - it is the entry point for running the module</li> </ul>"},{"location":"development/modules/#creating-a-new-module","title":"Creating a new module","text":"<p>Let's say we want to create a module that just prints and returns <code>Hello World!</code>. In case the user specifies a <code>name</code> parameter, it will use it instead.</p> Want to create your own project with modules? <p>In case you want to keep your modules private, or version the modules yourself, you can create your own repository and install them later as mentioned here.</p> <p>Projects and Python packages should follow the convention of having the <code>cryton-modules-</code> prefix.</p> <p>We will be using Poetry for this example.</p> <p>Create new poetry project for a module called <code>hello_world</code> for the <code>cryton.modules</code> namespace: <pre><code>poetry new --name cryton.modules.hello_world cryton-modules-my-collection\n</code></pre></p> <p>Go into the project directory: <pre><code>cd cryton-modules-my-collection\n</code></pre></p> <p>Add Cryton (with worker extras) as a dependency. <pre><code>poetry add \"cryton[worker]&gt;=2\"\n</code></pre></p> <p>You're all set. Follow the rest of the guide, but don't forget you already have the module directory (Python package).</p> <p>In the directory <code>cryton/modules/</code> create a new Python package (directory with <code>__init__.py</code> file) and give it appropriate name (<code>hello_world</code> in our case). <pre><code>mkdir cryton/modules/hello_world\ntouch cryton/modules/hello_world/__init__.py\n</code></pre></p> <p>Now create <code>module.py</code> file in the new directory. <pre><code>touch cryton/modules/hello_world/module.py\n</code></pre></p> <p>We should have the following structure: <pre><code>\u251c\u2500\u2500 cryton\n\u2502\u00a0\u00a0 \u251c\u2500\u2500 modules\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 hello_world\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n\u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u2502\u00a0\u00a0 \u251c\u2500\u2500 module.py\n</code></pre></p> <p>Copy the following code into the <code>cryton/modules/hello_world/module.py</code> file: <pre><code>from cryton.lib.utility.module import ModuleBase, ModuleOutput, Result\n\n\n# Module implementation\nclass Module(ModuleBase):\n    # The SCHEMA variable is used for input arguments validation (it uses JSON Schema)\n    SCHEMA = {\n        \"type\": \"object\",\n        \"description\": \"Arguments for the `hello_world` module.\",\n        \"properties\": {\n            \"name\": {\"type\": \"string\", \"minLength\": 1, \"description\": \"Name used in the greeting.\"}\n        },\n        \"additionalProperties\": False\n    }\n\n    # In case our module has any system requirements, we can check for them here\n    def check_requirements(self) -&gt; None:\n        pass\n\n    # This is the entrypoint to the module execution. \n    # Write the code you want to run here. Also add parsing and evaluation of results\n    def execute(self) -&gt; ModuleOutput:\n        # Arguments can be accessed using the `self._arguments` parameter\n        name = self._arguments.get(\"name\", \"World\")\n\n        to_print = f\"Hello {name}!\"\n\n        self._data.result = Result.OK  # The module finished successfully\n        self._data.output = to_print  # Output we want to send\n        return self._data\n</code></pre></p> <p>You just created a module that checks if the input parameter <code>name</code> is a string and has at least one character, in case it is defined. Once the module is executed it returns the greeting.</p> <p>Tip</p> <ul> <li>For more information, see the implementation of the <code>cryton.lib.utility.module.ModuleBase</code> class</li> <li>Since the modules are installed alongside Cryton, they have access to its features/code (Metasploit, Empire, ...)</li> <li>Do not forget to add tests</li> <li>Feel free to check other modules for inspiration</li> </ul>"},{"location":"execution-phase/","title":"Index","text":"<p>When you finally have a Plan instance stored in the database, you can create a new Run. For every Worker, a new Plan execution is created. The reason behind this is a storage of execution history. This way it is possible  to compare results and use of different variables for each execution.</p>"},{"location":"execution-phase/#actions","title":"Actions","text":"<p>To give you the ability to control your attack plan, here is a list of the supported actions.</p>"},{"location":"execution-phase/#create","title":"Create","text":"<p>Before we do anything, we have to create the Run instance. It is made of Plan instance and a list of Workers.</p> Example <pre><code>cryton-cli runs create &lt;plan-id&gt; &lt;worker-id&gt; &lt;worker-id&gt; ...\n</code></pre>"},{"location":"execution-phase/#execute","title":"Execute","text":"<p>The basic action you can do is Execute the Run. This will start it instantly. What does that mean?</p> <ul> <li>Delta and DateTime triggered Stages are scheduled</li> <li>HTTP/MSF triggers are started on Workers</li> <li>Run state is set to RUNNING</li> </ul> Example <pre><code>cryton-cli runs execute &lt;run-id&gt;\n</code></pre> <p>More information can be found here.</p>"},{"location":"execution-phase/#schedule-reschedule-unschedule","title":"Schedule, Reschedule, Unschedule","text":"<p>Schedule action does just that - it schedules an Execute action at a given time. If you want to change the time  of your execution, you can still reschedule it or simply unschedule it and leave it in a pending state.</p> Example <pre><code>cryton-cli runs schedule &lt;run-id&gt; &lt;date&gt; &lt;time&gt;\n</code></pre> <p>More information can be found here.</p>"},{"location":"execution-phase/#pause-resume","title":"Pause, resume","text":"<p>Anytime during Run execution, you can pause it. To continue the Run, simply issue the resume command. </p> Example <pre><code>cryton-cli runs pause &lt;run-id&gt;\n</code></pre> <p>More information can be found here.</p>"},{"location":"execution-phase/#stop","title":"Stop","text":"<p>Forcefully stop run and its sub-executions.</p> Example <pre><code>cryton-cli runs stop &lt;run-id&gt;\n</code></pre> <p>More information can be found here.</p>"},{"location":"execution-phase/#validate-modules","title":"Validate modules","text":"<p>Check if all the modules used in the Run are present on desired Workers and if their arguments set in the Plan are correct.</p> Example <pre><code>cryton-cli runs validate-modules &lt;run-id&gt;\n</code></pre> <p>More information can be found here.</p>"},{"location":"execution-phase/#parameters","title":"Parameters","text":"<p>The following table contains a list of output parameters.</p> Name Description Type Example state Current state of the execution. string PENDING start_time When the execution started. datetime 2022-07-21T20:37:28.343619Z pause_time Time of the last pause. datetime 2022-07-21T20:37:28.343619Z finish_time When the execution finished. datetime 2022-07-21T20:37:28.343619Z schedule_time When is the execution supposed to start. datetime 2022-07-21T20:37:28.343619Z aps_job_id ID of the job in scheduler. string abcd-1d2c-abcd-1d2c plan Which Plan is used for the execution. int 1"},{"location":"execution-phase/#states","title":"States","text":"<p>Here is a map of allowed states, transitions, and their description.</p> <p></p> <p>PENDING - Every execution starts its lifecycle in this state - it is inactive.</p> <p>SCHEDULED - Execution with this state will be started at the defined time.</p> <p>RUNNING - Execution is in progress and its sub-executions are being executed.</p> <p>PAUSING - If the user decides to pause the execution, it will change its state to PAUSING and wait until the conditions are met.</p> <p>PAUSED - Once all the sub-executions are paused or in a final state, the execution is marked as PAUSED.</p> <p>STOPPING - If the user decides to stop the execution, it will change its state to STOPPING and wait until the conditions are met.</p> <p>STOPPED - Once all the sub-executions are stopped, the execution is marked as STOPPED.</p> <p>FINISHED - In this state the execution, and its sub-executions have reached final states.</p>"},{"location":"execution-phase/dynamic-execution/","title":"Dynamic execution","text":"<p>To support dynamic security testing. We've added support for creating dynamic plans. They allow the user to  create an empty Plan/Stage and create their agent to control the execution instead of Cryton's advanced scheduler.</p>"},{"location":"execution-phase/dynamic-execution/#features","title":"Features","text":"<ul> <li>Create a Plan/Step/Stage for dynamic execution (an empty list of Stages/Steps can be provided)</li> <li>Add Step to Stage execution and execute it</li> <li>Add Stage to Plan execution and start it</li> <li>Added Steps are automatically set as a successor of the last Step (only if the <code>is_init</code> variable is not set to True and a possible parent Step exists)</li> </ul>"},{"location":"execution-phase/dynamic-execution/#limitations","title":"Limitations","text":"<ul> <li>Dynamic plan must have the <code>dynamic</code> variable set to True</li> <li>If you don't want to pass any Stages/Steps you must provide an empty list</li> <li>Each Stage and Step must have a unique name in the same Plan (utilize inventory variables to overcome this limitation)</li> <li>The Stage/Step you're trying to add must be valid</li> <li>Run's Plan must contain the instance (Stage/Step) you are trying to execute</li> <li>You cannot create multiple executions for an instance (you can execute an instance only once) under the same Plan execution</li> </ul>"},{"location":"execution-phase/dynamic-execution/#example-using-python","title":"Example using Python","text":"<p>You will probably want to automate these actions rather than using CLI to do them. For this purpose, we will create a simple Python script that will:</p> <ol> <li>Create a template</li> <li>Create a Plan</li> <li>Add a Stage</li> <li>Add a Step</li> <li>Create a Run</li> <li>Execute the Run</li> <li>Create a new Step</li> <li>Execute the new Step</li> <li>Get the Run report</li> </ol> <p>Requirements</p> <ul> <li>Cryton Core is running (REST API is accessible at localhost:8000)</li> <li>Worker is registered in Core and running</li> <li>module command is accessible from the Worker</li> </ul> <p>Download the example script:</p> curlwget <pre><code>curl -O https://cryton.gitlab-pages.ics.muni.cz/cryton//execution-phase/dynamic_example.py\n</code></pre> <pre><code>wget https://cryton.gitlab-pages.ics.muni.cz/cryton//execution-phase/dynamic_example.py\n</code></pre> <p>Update the <code>WORKER_ID</code> variable, and run the script: <pre><code>python3 dynamic_example.py\n</code></pre></p> Show the example <pre><code>import requests\nimport yaml\nimport time\n\nWORKER_ID = 0\n\nTEMPLATE = {\"name\": \"example\", \"dynamic\": True, \"stages\": {}}\nSTAGE = {\"no-delay-stage-{{ id }}\": {\"steps\": {}}}\nSTEP = {\"initial-step\": {\"is_init\": True, \"module\": \"command\", \"arguments\": {\"command\": \"whoami\"}}}\nSTEP_REUSABLE = {\"reusable-step-{{ id }}\": {\"module\": \"command\", \"arguments\": {\"cmd\": \"{{ command }}\"}}}\n\n\ndef get_api_root():\n    api_address = \"localhost\"\n    api_port = 8000\n    return f\"http://{api_address}:{api_port}/api/\"\n\n\nif __name__ == \"__main__\":\n    # Check if the Worker is specified\n    if WORKER_ID &lt; 1:\n        raise Exception(\"Please specify a correct Worker ID at the top of the file.\")\n    print(f\"Worker id: {WORKER_ID}\")\n\n    # Get api root\n    api_root = get_api_root()\n\n    # 1. Create a template\n    r_create_template = requests.post(f\"{api_root}templates/\", files={\"file\": yaml.dump(TEMPLATE)})\n    template_id = r_create_template.json()[\"id\"]\n    print(f\"Template id: {template_id}\")\n\n    # 2. Create a Plan\n    r_create_plan = requests.post(f\"{api_root}plans/\", data={\"template_id\": template_id})\n    plan_id = r_create_plan.json()[\"id\"]\n    print(f\"Plan id: {plan_id}\")\n\n    # 3. Add a Stage\n    stage_inventory = {\"id\": 1}\n    r_create_stage = requests.post(\n        f\"{api_root}stages/\",\n        data={\"plan_id\": plan_id},\n        files={\"file\": yaml.dump(STAGE), \"inventory_file\": yaml.dump(stage_inventory)},\n    )\n    stage_id = r_create_stage.json()[\"id\"]\n    print(f\"Stage id: {stage_id}\")\n\n    # 4. Add a Step\n    r_create_step = requests.post(f\"{api_root}steps/\", data={\"stage_id\": stage_id}, files={\"file\": yaml.dump(STEP)})\n    step_id = r_create_step.json()[\"id\"]\n    print(f\"Step id: {step_id}\")\n\n    # 5. Create a new Run\n    r_create_run = requests.post(f\"{api_root}runs/\", data={\"plan_id\": plan_id, \"worker_ids\": [WORKER_ID]})\n    run_id = r_create_run.json()[\"id\"]\n    print(f\"Run id: {run_id}\")\n\n    # 6. Execute the Run\n    r_execute_run = requests.post(f\"{api_root}runs/{run_id}/execute/\", data={\"run_id\": run_id})\n    print(f\"Run response: {r_execute_run.text}\")\n\n    # 7. Create a new Step\n    step_inventory = {\"id\": 1, \"command\": \"echo test\"}\n    r_create_step2 = requests.post(\n        f\"{api_root}steps/\",\n        data={\"stage_id\": stage_id},\n        files={\"file\": yaml.dump(STEP_REUSABLE), \"inventory_file\": yaml.dump(step_inventory)},\n    )\n    step_id2 = r_create_step2.json()[\"id\"]\n    print(f\"Second step id: {step_id2}\")\n\n    # 8. Execute the new Step (First, get Stage execution's id)\n    stage_execution_id = requests.get(f\"{api_root}runs/{run_id}/report/\").json()[\"detail\"][\"plan_executions\"][0][\n        \"stage_executions\"\n    ][0][\"id\"]\n    r_execute_step = requests.post(\n        f\"{api_root}steps/{step_id2}/execute/\", data={\"stage_execution_id\": stage_execution_id}\n    )\n    print(f\"Second Step response: {r_execute_step.text}\")\n\n    # 9. Get Run report\n    for i in range(5):\n        time.sleep(3)\n        current_state = requests.get(f\"{api_root}runs/{run_id}/\").json()[\"state\"]\n        if current_state == \"FINISHED\":\n            break\n        print(f\"Waiting for a final state. Current state: {current_state}\")\n\n    print()\n    print(\"Report: \")\n    print(yaml.dump(requests.get(f\"{api_root}runs/{run_id}/report/\").json()[\"detail\"]))\n</code></pre>"},{"location":"execution-phase/dynamic-execution/#example-using-cli","title":"Example using CLI","text":"<p>For this example we will assume that:</p> <p>Requirements</p> <ul> <li>Cryton Core is running (REST API is accessible at localhost:8000)</li> <li>Worker is registered in Core and running</li> <li>module command is accessible from the Worker</li> </ul> <p>Files used in this guide can be found in the Cryton repository.</p> <p>It's best to switch to the example directory, so we will assume that's true. <pre><code>cd cryton/examples/dynamic-execution/\n</code></pre></p>"},{"location":"execution-phase/dynamic-execution/#building-a-base-plan-and-executing-it","title":"Building a base Plan and executing it","text":"<p>First, we create a template <pre><code>cryton-cli plan-templates create template.yml\n</code></pre></p> <p>Create a Plan (instance) <pre><code>cryton-cli plans create &lt;template_id&gt;\n</code></pre></p> <p>Add a Stage to the Plan (update the inventory file to your needs) <pre><code>cryton-cli stages create &lt;plan_id&gt; stage.yml -i stage-inventory.yml\n</code></pre></p> <p>Add an initial Step to the Stage <pre><code>cryton-cli steps create &lt;stage_id&gt; step-init.yml\n</code></pre></p> <p>Add a reusable Step to the Stage (update the inventory file to your needs) <pre><code>cryton-cli steps create &lt;stage_id&gt; step-reusable.yml -i step-reusable-inventory.yml\n</code></pre></p> <p>Create a Worker you want to test on <pre><code>cryton-cli workers create local\n</code></pre></p> <p>Create a Run <pre><code>cryton-cli runs create &lt;plan_id&gt; &lt;worker_id&gt;\n</code></pre></p> <p>Execute the Run <pre><code>cryton-cli runs execute &lt;run_id&gt;\n</code></pre></p>"},{"location":"execution-phase/dynamic-execution/#start-a-standalone-stage","title":"Start a standalone Stage:","text":"<p>Add your Stage to the desired Plan (Update the inventory file! Stage names must be unique.) <pre><code>cryton-cli stages create &lt;plan_id&gt; stage.yml -i stage-inventory.yml\n</code></pre></p> <p>Start your Stage (its trigger) under the desired Plan execution  <pre><code>cryton-cli stages start-trigger &lt;stage_id&gt; &lt;plan_execution_id&gt;\n</code></pre></p>"},{"location":"execution-phase/dynamic-execution/#execute-a-standalone-step","title":"Execute a standalone Step:","text":"<p>Add your Step to the desired Stage (Update the inventory file! Step names must be unique.) <pre><code>cryton-cli steps create &lt;stage_id&gt; step-reusable.yml -i step-reusable-inventory.yml\n</code></pre></p> <p>Execute your Step under the desired Stage execution <pre><code>cryton-cli steps execute &lt;step_id&gt; &lt;stage_execution_id&gt;\n</code></pre></p>"},{"location":"execution-phase/dynamic-execution/#check-the-results-works-only-once-the-run-is-created","title":"Check the results - works only once the Run is created:","text":"<pre><code>cryton-cli runs report 1 --less\n</code></pre>"},{"location":"execution-phase/execution/","title":"Execution statistics","text":"<p>There are special kinds of objects called Executions for every unit in the attack scenario:</p> <ul> <li>Plan execution</li> <li>Stage execution</li> <li>Step execution</li> </ul> <p>These are not objects that need to be created by you - instead, they are created when their respective unit is executed.  This way the history and results of each execution can be stored.</p> <p>Every Execution object stores a start and finish time, so it is easy to count the running times of each unit. With Steps  the Execution is also a place where the results from attack modules are stored.</p>"},{"location":"execution-phase/execution/#plan-execution","title":"Plan execution","text":"<p>For every execution of the Plan (on a given Worker) a new Plan execution is created.</p> <p>The importance of this object is in keeping the history of executions of a given run. This object also connects all  other sub-executions (Stage and Step) with the Run.</p>"},{"location":"execution-phase/execution/#parameters","title":"Parameters","text":"<p>The following table contains a list of output parameters.</p> Name Description Type Example state Current state of the execution. string PENDING start_time When the execution started. datetime 2022-07-21T20:37:28.343619Z pause_time Time of the last pause. datetime 2022-07-21T20:37:28.343619Z finish_time When the execution finished. datetime 2022-07-21T20:37:28.343619Z schedule_time When is the execution supposed to start. datetime 2022-07-21T20:37:28.343619Z aps_job_id ID of the job in scheduler. string abcd-1d2c-abcd-1d2c run Run of which it is a part of. int 1 worker Which Worker is used for the execution. int 1 evidence_directory In what directory is the evidence saved. string /path/to/evidence/directory"},{"location":"execution-phase/execution/#states","title":"States","text":"<p>Here is a map of allowed states, transitions, and their description.</p> <p></p> <p>PENDING - Every execution starts its lifecycle in this state - it is inactive.</p> <p>SCHEDULED - Execution with this state will be started at the defined time.</p> <p>RUNNING - Execution is in progress and its sub-executions are being executed.</p> <p>PAUSING - If the user decides to pause the execution, it will change its state to PAUSING and wait until the conditions are met.</p> <p>PAUSED - Once all the sub-executions are paused or in a final state, the execution is marked as PAUSED.</p> <p>STOPPING - If the user decides to stop the execution, it will change its state to STOPPING and wait until the conditions are met.</p> <p>STOPPED - Once all the sub-executions are stopped, the execution is marked as STOPPED.</p> <p>FINISHED - In this state the execution, and its sub-executions have reached final states.</p>"},{"location":"execution-phase/execution/#stage-execution","title":"Stage execution","text":"<p>Stage execution contains execution data for its Stage counterpart.</p>"},{"location":"execution-phase/execution/#parameters_1","title":"Parameters","text":"<p>The following table contains a list of output parameters.</p> Name Description Type Example state Current state of the execution. string PENDING start_time When the execution started. datetime 2022-07-21T20:37:28.343619Z pause_time Time of the last pause. datetime 2022-07-21T20:37:28.343619Z finish_time When the execution finished. datetime 2022-07-21T20:37:28.343619Z schedule_time When is the execution supposed to start. datetime 2022-07-21T20:37:28.343619Z aps_job_id ID of the job in scheduler. string abcd-1d2c-abcd-1d2c trigger_id ID of the trigger on Worker. string abcd-1d2c-abcd-1d2c plan_execution Plan execution of which it is a part of. int 1"},{"location":"execution-phase/execution/#states_1","title":"States","text":"<p>Here is a map of allowed states, transitions, and their description.</p> <p></p> <p>PENDING - Every execution starts its lifecycle in this state - it is inactive.</p> <p>SCHEDULED - Execution with this state will be started at the defined time.</p> <p>STARTING - Action that requires Worker confirmation is occurring - starting listener.</p> <p>ERROR - An error occurred during execution start up - unable to start listener.</p> <p>WAITING - Execution in this state is waiting for its dependencies (other executions) to finish.</p> <p>AWAITING - Execution is awaiting a trigger activation.</p> <p>RUNNING - Execution is in progress and its sub-executions are being executed.</p> <p>PAUSING - If the user decides to pause the execution, it will change its state to PAUSING and wait until the conditions are met.</p> <p>PAUSED - Once all the sub-executions are paused or in a final state, the execution is marked as PAUSED.</p> <p>STOPPING - If the user decides to stop the execution, it will change its state to STOPPING and wait until the conditions are met.</p> <p>STOPPED - Once all the sub-executions are stopped, the execution is marked as STOPPED.</p> <p>FINISHED - In this state the execution, and its sub-executions have reached final states.</p>"},{"location":"execution-phase/execution/#step-execution","title":"Step execution","text":"<p>Step execution contains execution data for its Step counterpart.</p>"},{"location":"execution-phase/execution/#parameters_2","title":"Parameters","text":"<p>The following table contains a list of output parameters.</p> Name Description Type Example state Current state of the execution. string PENDING start_time When the execution started. datetime 2022-07-21T20:37:28.343619Z pause_time Time of the last pause. datetime 2022-07-21T20:37:28.343619Z finish_time When the execution finished. datetime 2022-07-21T20:37:28.343619Z output Received output from the module execution. string created session with id 1. serialized_output Serializable output from the module execution. dictionary {\"session_id\": 1} valid Whether the parameters passed to the module are valid or not. boolean true stage_execution Stage execution of which it is a part of. int 1"},{"location":"execution-phase/execution/#states_2","title":"States","text":"<p>Here is a map of allowed states, transitions, and their description.</p> <p></p> <p>PENDING - Every execution starts its lifecycle in this state - it is inactive.</p> <p>STARTING - Action that requires Worker confirmation is occurring - starting the execution.</p> <p>RUNNING - Module execution is in progress.</p> <p>PAUSED - Execution is marked as PAUSED if its Stage execution is pausing and only if its about to be executed next.</p> <p>STOPPING - If the user decides to stop the execution, it will change its state to STOPPING and wait until the conditions are met.</p> <p>STOPPED - Once the module execution is stopped, the execution is marked as STOPPED.</p> <p>FINISHED - In this state the execution has successfully FINISHED.</p> <p>ERROR - An unexpected error occurred during the execution.</p> <p>IGNORED - The conditions to start the execution weren't met.</p>"},{"location":"execution-phase/reporting/","title":"Reporting","text":"<p>After the Run has successfully ended (or not) you can generate a report with every Step's output.  When you have multiple Plan executions in a single Run (when utilizing multiple Workers), you can compare each  execution and use this insight to e.g. score each team in a cybersecurity exercise.</p> <p>The easiest way to generate a report is to use CLI: <pre><code>cryton-cli runs report &lt;ID&gt;\n</code></pre></p> <p>Optionally, you can also generate a report for Plan/Stage/Step execution.</p> <p>You can see an example report here: <pre><code>id: 7\nplan_id: 6\nplan_name: Basic example\nstate: FINISHED\nschedule_time: null\nstart_time: '2022-07-21T20:37:27.650142Z'\npause_time: null\nfinish_time: '2022-07-21T20:37:28.527673Z'\nplan_executions:\n- id: 7\n  plan_name: Basic example\n  state: FINISHED\n  schedule_time: null\n  start_time: '2022-07-21T20:37:27.661100Z'\n  finish_time: '2022-07-21T20:37:28.517554Z'\n  pause_time: null\n  worker_id: 1\n  worker_name: e2e-1\n  evidence_dir: /tmp/run_7/worker_e2e-1\n  stage_executions:\n  - id: 7\n    stage_name: get-localhost-credentials\n    state: FINISHED\n    start_time: '2022-07-21T20:37:27.862354Z'\n    pause_time: null\n    finish_time: '2022-07-21T20:37:28.504804Z'\n    schedule_time: '2022-07-21T20:37:27.762581Z'\n    step_executions:\n    - id: 11\n      step_name: check-ssh\n      state: FINISHED\n      start_time: '2022-07-21T20:37:27.898861Z'\n      finish_time: '2022-07-21T20:37:28.276521Z'\n      output: ''\n      serialized_output:\n        stats:\n          args: /usr/bin/nmap -oX - -sV -p22 192.168.61.13\n          start: '1658386108'\n          scanner: nmap\n          version: '7.80'\n          startstr: Thu Jul 21 06:48:28 2022\n          xmloutputversion: '1.04'\n        runtime:\n          exit: success\n          time: '1658386109'\n          elapsed: '0.31'\n          summary: Nmap done at Thu Jul 21 06:48:29 2022; 1 IP address (1 host up)\n            scanned in 0.31 seconds\n          timestr: Thu Jul 21 06:48:29 2022\n        192.168.61.13:\n          ports:\n          - cpe:\n            - cpe: cpe:/a:openbsd:openssh:8.4p1\n            - cpe: cpe:/o:linux:linux_kernel\n            state: open\n            portid: '22'\n            reason: syn-ack\n            scripts: []\n            service:\n              conf: '10'\n              name: ssh\n              method: probed\n              ostype: Linux\n              product: OpenSSH\n              version: 8.4p1 Debian 5\n              extrainfo: protocol 2.0\n            protocol: tcp\n            reason_ttl: '64'\n          state:\n            state: up\n            reason: arp-response\n            reason_ttl: '0'\n          osmatch: {}\n          hostname:\n          - name: 192.168.61.13\n            type: PTR\n          macaddress:\n            addr: 08:00:27:D4:BF:9E\n            vendor: Oracle VirtualBox virtual NIC\n            addrtype: mac\n      evidence_file: 'No evidence '\n      valid: false\n    - id: 12\n      step_name: bruteforce\n      state: FINISHED\n      start_time: '2022-07-21T20:37:28.343619Z'\n      finish_time: '2022-07-21T20:37:28.479002Z'\n      output: ''\n      serialized_output:\n        password: victim\n        username: victim\n        all_credentials:\n        - password: victim\n          username: victim\n      evidence_file: 'No evidence '\n      valid: false\n</code></pre></p>"},{"location":"interfaces/","title":"Index","text":"<p>Cryton toolset can be managed more or less using REST API served by the Hive component.</p> <p>You can send requests directly, or use a dedicated application like CLI or front-end.</p>"},{"location":"interfaces/cli/","title":"CLI","text":"<p>CLI implements capabilities of the Cryton's REST API and can be automated by using custom scripts.</p> <p>Command aliases support</p> <p>Instead of typing the whole command, use only the unique first letters.</p> <p><code>cryton-cli workers list</code> -&gt; <code>cryton-cli w l</code></p> <pre><code>Usage: cryton-cli [OPTIONS] COMMAND [ARGS]...\n\n  Wrapper for Hive's REST API.\n\nOptions:\n  --version           Show the version and exit.\n  -H, --host TEXT     Cryton's API address.\n  -p, --port INTEGER  Cryton's API address.\n  --secure            Use HTTPS instead of HTTP.\n  --debug             Do not format output.\n  --help              Show this message and exit.\n\nCommands:\n  execution-variables  Manage Execution variables from here.\n  generate-docs        Generate Markdown documentation for CLI.\n  logs                 Manage logs from here.\n  plan-executions      Manage Plan's executions from here.\n  plan-templates       Manage Plan templates from here.\n  plans                Manage Plans from here.\n  runs                 Manage Runs from here.\n  stage-executions     Manage Stage's executions from here.\n  stages               Manage Stages from here.\n  step-executions      Manage Step's executions from here.\n  steps                Manage Steps from here.\n  workers              Manage Workers from here.\n</code></pre>"},{"location":"interfaces/cli/#execution-variables","title":"execution-variables","text":"<p>Manage Execution variables from here.</p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#create","title":"create","text":"<p>Create new execution variable(s) for PLAN_EXECUTION_ID from FILE.</p> <p>PLAN_EXECUTION_ID IS ID of the desired PlanExecution.</p> <p>FILE is path (can be multiple) to file(s) containing execution variables.</p> <p>Arguments: - PLAN_EXECUTION_ID - FILE  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#delete","title":"delete","text":"<p>Delete Execution variable with EXECUTION_VARIABLE_ID saved in Cryton.</p> <p>EXECUTION_VARIABLE_ID is ID of the Execution_variable you want to delete.</p> <p>Arguments: - EXECUTION_VARIABLE_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#list","title":"list","text":"<p>List existing execution variables.</p> <p>Options: - parameter_filters (<code>-f</code>, <code>--filter</code>) - Filter results using returned parameters (for example <code>id 1</code>, <code>name value</code>). - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - limit (<code>-l</code>, <code>--limit</code>) - Number of results to return per page. - offset (<code>-o</code>, <code>--offset</code>) - The initial index from which to return the results. - less (<code>--less</code>) - Show less like output. - parent (<code>-p</code>, <code>--parent</code>) - Filter Execution variables using Plan execution ID. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#show","title":"show","text":"<p>Show Execution variable with EXECUTION_VARIABLE_ID saved in Cryton.</p> <p>EXECUTION_VARIABLE_ID is ID of the Execution variable you want to see.</p> <p>Arguments: - EXECUTION_VARIABLE_ID  </p> <p>Options: - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#generate-docs","title":"generate-docs","text":"<p>Generate Markdown documentation for CLI.</p> <p>FILE is path/to/your/file where you want to save the generated documentation.</p> <p>Arguments: - FILE  </p> <p>Options: - layer (<code>-l</code>, <code>--layer</code>) - Highest header level. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#logs","title":"logs","text":"<p>Manage logs from here.</p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#list_1","title":"list","text":"<p>List existing Logs.</p> <p>Options: - parameter_filters (<code>-f</code>, <code>--filter</code>) - Filter results using returned parameters (for example <code>id 1</code>, <code>name value</code>). - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - limit (<code>-l</code>, <code>--limit</code>) - Number of results to return per page. - offset (<code>-o</code>, <code>--offset</code>) - The initial index from which to return the results. - less (<code>--less</code>) - Show less like output. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#plan-executions","title":"plan-executions","text":"<p>Manage Plan's executions from here.</p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#delete_1","title":"delete","text":"<p>Delete Plan's execution with EXECUTION_ID.</p> <p>EXECUTION_ID is ID of the Plan's execution you want to delete.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#list_2","title":"list","text":"<p>List existing Plan's executions in Cryton.</p> <p>Options: - parameter_filters (<code>-f</code>, <code>--filter</code>) - Filter results using returned parameters (for example <code>id 1</code>, <code>name value</code>). - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - limit (<code>-l</code>, <code>--limit</code>) - Number of results to return per page. - offset (<code>-o</code>, <code>--offset</code>) - The initial index from which to return the results. - less (<code>--less</code>) - Show less like output. - parent (<code>-p</code>, <code>--parent</code>) - Filter Plan executions using Run ID. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#pause","title":"pause","text":"<p>Pause Plan's execution with EXECUTION_ID saved in Cryton.</p> <p>EXECUTION_ID is ID of the Plan's execution you want to pause.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#report","title":"report","text":"<p>Create report for Plan's execution with EXECUTION_ID saved in Cryton.</p> <p>EXECUTION_ID is ID of the Plan's execution you want to create report for.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - file (<code>-f</code>, <code>--file</code>) - File to save the report to (default is /tmp). - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#resume","title":"resume","text":"<p>Resume Plan's execution with EXECUTION_ID saved in Cryton.</p> <p>EXECUTION_ID is ID of the Plan's execution you want to resume.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#show_1","title":"show","text":"<p>Show Plan's execution with EXECUTION_ID.</p> <p>EXECUTION_ID is ID of the Plan's execution you want to see.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#stop","title":"stop","text":"<p>Stop Plan's execution with EXECUTION_ID saved in Cryton.</p> <p>EXECUTION_ID is ID of the Plan's execution you want to stop.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#validate-modules","title":"validate-modules","text":"<p>Validate modules for Plan's execution with EXECUTION_ID saved in Cryton.</p> <p>EXECUTION_ID is ID of the Plan's execution you want to validate modules for.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#plan-templates","title":"plan-templates","text":"<p>Manage Plan templates from here.</p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#create_1","title":"create","text":"<p>Store Plan Template into Cryton.</p> <p>FILE is path/to/your/file that you want to upload to Cryton.</p> <p>Arguments: - FILE  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#delete_2","title":"delete","text":"<p>Delete Template with TEMPLATE_ID saved in Cryton.</p> <p>TEMPLATE_ID is ID of the Template you want to delete.</p> <p>Arguments: - TEMPLATE_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#get-template","title":"get-template","text":"<p>Get Template with TEMPLATE_ID saved in Cryton.</p> <p>TEMPLATE_ID is ID of the Template you want to get.</p> <p>Arguments: - TEMPLATE_ID  </p> <p>Options: - file (<code>-f</code>, <code>--file</code>) - File to save the report to (default is /tmp). - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#list_3","title":"list","text":"<p>List existing Plan templates in Cryton.</p> <p>Options: - parameter_filters (<code>-f</code>, <code>--filter</code>) - Filter results using returned parameters (for example <code>id 1</code>, <code>name value</code>). - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - limit (<code>-l</code>, <code>--limit</code>) - Number of results to return per page. - offset (<code>-o</code>, <code>--offset</code>) - The initial index from which to return the results. - less (<code>--less</code>) - Show less like output. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#show_2","title":"show","text":"<p>Show Template with TEMPLATE_ID saved in Cryton.</p> <p>TEMPLATE_ID is ID of the Template you want to see.</p> <p>Arguments: - TEMPLATE_ID  </p> <p>Options: - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#plans","title":"plans","text":"<p>Manage Plans from here.</p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#create_2","title":"create","text":"<p>Fill template PLAN_TEMPLATE_ID with inventory file(s) and save it to Cryton.</p> <p>PLAN_TEMPLATE_ID is ID of the template you want to fill.</p> <p>Arguments: - TEMPLATE_ID  </p> <p>Options: - inventory_files (<code>-i</code>, <code>--inventory-file</code>) - Inventory file used to fill the template. Can be used multiple times. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#delete_3","title":"delete","text":"<p>Delete Plan with PLAN_ID saved in Cryton.</p> <p>PLAN_ID is ID of the Plan you want to delete.</p> <p>Arguments: - PLAN_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#execute","title":"execute","text":"<p>Execute Plan saved in Cryton with PLAN_ID on Worker with WORKER_ID and attach it to Run with RUN_ID.</p> <p>PLAN_ID is ID of the Plan you want to execute.</p> <p>WORKER_ID is ID of the Plan you want to execute.</p> <p>RUN_ID is ID of the Run you want to attach this execution to.</p> <p>Arguments: - PLAN_ID - WORKER_ID - RUN_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#get-plan","title":"get-plan","text":"<p>Get Plan with PLAN_ID saved in Cryton.</p> <p>PLAN_ID is ID of the Plan you want to get.</p> <p>Arguments: - PLAN_ID  </p> <p>Options: - file (<code>-f</code>, <code>--file</code>) - File to save the report to (default is /tmp). - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#list_4","title":"list","text":"<p>List existing Plans.</p> <p>Options: - parameter_filters (<code>-f</code>, <code>--filter</code>) - Filter results using returned parameters (for example <code>id 1</code>, <code>name value</code>). - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - limit (<code>-l</code>, <code>--limit</code>) - Number of results to return per page. - offset (<code>-o</code>, <code>--offset</code>) - The initial index from which to return the results. - less (<code>--less</code>) - Show less like output. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#show_3","title":"show","text":"<p>Show Plan with PLAN_ID saved in Cryton.</p> <p>PLAN_ID is ID of the Plan you want to see.</p> <p>Arguments: - PLAN_ID  </p> <p>Options: - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#validate","title":"validate","text":"<p>Validate (syntax check) your FILE with Plan.</p> <p>FILE is path/to/your/file that you want to validate.</p> <p>Arguments: - FILE  </p> <p>Options: - inventory_files (<code>-i</code>, <code>--inventory-file</code>) - Inventory file used to fill the template. Can be used multiple times. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#runs","title":"runs","text":"<p>Manage Runs from here.</p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#create_3","title":"create","text":"<p>Create new Run with PLAN_ID and WORKER_IDS.</p> <p>PLAN_ID is ID of the Plan you want to create Run for. (for example 1)</p> <p>WORKER_IDS is list of IDs you want to use for Run. (1 2 3)</p> <p>Arguments: - PLAN_ID - WORKER_IDS  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#delete_4","title":"delete","text":"<p>Delete Run with RUN_ID saved in Cryton.</p> <p>RUN_ID is ID of the Run you want to delete.</p> <p>Arguments: - RUN_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#execute_1","title":"execute","text":"<p>Execute Run saved in Cryton with RUN_ID.</p> <p>RUN_ID is ID of the Run you want to execute.</p> <p>Arguments: - RUN_ID  </p> <p>Options: - skip_checks (<code>-S</code>, <code>--skip-checks</code>) - Skip health-checks and modules validation. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#get-plan_1","title":"get-plan","text":"<p>Get plan from Run with RUN_ID saved in Cryton.</p> <p>RUN_ID is ID of the Run you want to get plan from.</p> <p>Arguments: - RUN_ID  </p> <p>Options: - file (<code>-f</code>, <code>--file</code>) - File to save the plan to (default is /tmp). - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#health-check-workers","title":"health-check-workers","text":"<p>Check Workers for Run with RUN_ID saved in Cryton.</p> <p>RUN_ID is ID of the Run you want to check Workers for.</p> <p>Arguments: - RUN_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#list_5","title":"list","text":"<p>List existing Runs in Cryton.</p> <p>Options: - parameter_filters (<code>-f</code>, <code>--filter</code>) - Filter results using returned parameters (for example <code>id 1</code>, <code>name value</code>). - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - limit (<code>-l</code>, <code>--limit</code>) - Number of results to return per page. - offset (<code>-o</code>, <code>--offset</code>) - The initial index from which to return the results. - less (<code>--less</code>) - Show less like output. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#pause_1","title":"pause","text":"<p>Pause Run saved in Cryton with RUN_ID.</p> <p>RUN_ID is ID of the Run you want to pause.</p> <p>Arguments: - RUN_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#report_1","title":"report","text":"<p>Create report for Run with RUN_ID saved in Cryton.</p> <p>RUN_ID is ID of the Run you want to create report for.</p> <p>Arguments: - RUN_ID  </p> <p>Options: - file (<code>-f</code>, <code>--file</code>) - File to save the report to (default is /tmp). - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#reschedule","title":"reschedule","text":"<p>Reschedule Run saved in Cryton with RUN_ID to specified DATE and TIME.</p> <p>RUN_ID is ID of the Run you want to reschedule.</p> <p>DATE in format year-month-day (Y-m-d).</p> <p>TIME in format hours:minutes:seconds (H:M:S).</p> <p>Arguments: - RUN_ID - TO_DATE - TO_TIME  </p> <p>Options: - utc_timezone (<code>--utc-timezone</code>) - Input time in UTC timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#resume_1","title":"resume","text":"<p>Resume Run saved in Cryton with RUN_ID.</p> <p>RUN_ID is ID of the Run you want to resume.</p> <p>Arguments: - RUN_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#schedule","title":"schedule","text":"<p>Schedule Run saved in Cryton with RUN_ID to specified DATE and TIME.</p> <p>RUN_ID is ID of the Run you want to schedule.</p> <p>DATE in format year-month-day (Y-m-d).</p> <p>TIME in format hours:minutes:seconds (H:M:S).</p> <p>Arguments: - RUN_ID - TO_DATE - TO_TIME  </p> <p>Options: - utc_timezone (<code>--utc-timezone</code>) - Input time in UTC timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#show_4","title":"show","text":"<p>Show Run with RUN_ID saved in Cryton.</p> <p>RUN_ID is ID of the Run you want to see.</p> <p>Arguments: - RUN_ID  </p> <p>Options: - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#stop_1","title":"stop","text":"<p>Stop Run saved in Cryton with RUN_ID.</p> <p>RUN_ID is ID of the Run you want to stop.</p> <p>Arguments: - RUN_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#unschedule","title":"unschedule","text":"<p>Unschedule Run saved in Cryton with RUN_ID.</p> <p>RUN_ID is ID of the Run you want to unschedule.</p> <p>Arguments: - RUN_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#validate-modules_1","title":"validate-modules","text":"<p>Validate modules for Run with RUN_ID saved in Cryton.</p> <p>RUN_ID is ID of the Run you want to validate modules for.</p> <p>Arguments: - RUN_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#stage-executions","title":"stage-executions","text":"<p>Manage Stage's executions from here.</p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#delete_5","title":"delete","text":"<p>Delete Stage's execution with EXECUTION_ID.</p> <p>EXECUTION_ID is ID of the Stage's execution you want to delete.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#list_6","title":"list","text":"<p>List existing Stage's executions in Cryton.</p> <p>Options: - parameter_filters (<code>-f</code>, <code>--filter</code>) - Filter results using returned parameters (for example <code>id 1</code>, <code>name value</code>). - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - limit (<code>-l</code>, <code>--limit</code>) - Number of results to return per page. - offset (<code>-o</code>, <code>--offset</code>) - The initial index from which to return the results. - less (<code>--less</code>) - Show less like output. - parent (<code>-p</code>, <code>--parent</code>) - Filter Stage executions using Plan execution ID. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#re-execute","title":"re-execute","text":"<p>Re-execute Stage's execution with EXECUTION_ID.</p> <p>EXECUTION_ID is ID of the Stage's execution you want to stop.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - immediately (<code>--immediately</code>) - Re-execute StageExecution immediately without starting its Trigger. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#report_2","title":"report","text":"<p>Create report for Stage's execution with EXECUTION_ID.</p> <p>EXECUTION_ID is ID of the Stage's execution you want to create report for.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - file (<code>-f</code>, <code>--file</code>) - File to save the report to (default is /tmp). - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#show_5","title":"show","text":"<p>Show Stage's execution with EXECUTION_ID.</p> <p>EXECUTION_ID is ID of the Stage's execution you want to see.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#stop_2","title":"stop","text":"<p>Stop Stage's execution with EXECUTION_ID.</p> <p>EXECUTION_ID is ID of the Stage's execution you want to stop.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#stages","title":"stages","text":"<p>Manage Stages from here.</p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#create_4","title":"create","text":"<p>Create Stage from FILE and add it to Plan with PLAN_ID.</p> <p>PLAN_ID is an ID of the Plan you want to add the Stage to.</p> <p>FILE is a path to the file containing the Stage template.</p> <p>Arguments: - PLAN_ID - FILE  </p> <p>Options: - inventory_files (<code>-i</code>, <code>--inventory-file</code>) - Inventory file used to fill the template. Can be used multiple times. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#delete_6","title":"delete","text":"<p>Delete Stage with STAGE_ID.</p> <p>STAGE_ID is ID of the Stage you want to delete.</p> <p>Arguments: - STAGE_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#list_7","title":"list","text":"<p>List existing Stages in Cryton.</p> <p>Options: - parameter_filters (<code>-f</code>, <code>--filter</code>) - Filter results using returned parameters (for example <code>id 1</code>, <code>name value</code>). - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - limit (<code>-l</code>, <code>--limit</code>) - Number of results to return per page. - offset (<code>-o</code>, <code>--offset</code>) - The initial index from which to return the results. - less (<code>--less</code>) - Show less like output. - parent (<code>-p</code>, <code>--parent</code>) - Filter Stages using Plan ID. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#show_6","title":"show","text":"<p>Show Stage with STAGE_ID.</p> <p>STAGE_ID is ID of the Stage you want to see.</p> <p>Arguments: - STAGE_ID  </p> <p>Options: - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#start-trigger","title":"start-trigger","text":"<p>Start Stage's trigger with STAGE_ID under Plan execution with PLAN_EXECUTION_ID.</p> <p>STAGE_ID is an ID of the Stage you want to start.</p> <p>PLAN_EXECUTION_ID is an ID of the Plan execution you want to set as a parent of the Stage execution.</p> <p>Arguments: - STAGE_ID - PLAN_EXECUTION_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#validate_1","title":"validate","text":"<p>Validate FILE containing stage against a plan with PLAN_ID.</p> <p>FILE is path/to/your/file that you want to validate.</p> <p>PLAN_ID is an ID of the plan you want to validate the stage against.</p> <p>Arguments: - FILE - PLAN_ID  </p> <p>Options: - inventory_files (<code>-i</code>, <code>--inventory-file</code>) - Inventory file used to fill the template. Can be used multiple times. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#step-executions","title":"step-executions","text":"<p>Manage Step's executions from here.</p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#delete_7","title":"delete","text":"<p>Delete Step's execution with EXECUTION_ID saved in Cryton.</p> <p>EXECUTION_ID is ID of the Step's execution you want to delete.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#list_8","title":"list","text":"<p>List existing Step's executions in Cryton.</p> <p>Options: - parameter_filters (<code>-f</code>, <code>--filter</code>) - Filter results using returned parameters (for example <code>id 1</code>, <code>name value</code>). - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - limit (<code>-l</code>, <code>--limit</code>) - Number of results to return per page. - offset (<code>-o</code>, <code>--offset</code>) - The initial index from which to return the results. - less (<code>--less</code>) - Show less like output. - parent (<code>-p</code>, <code>--parent</code>) - Filter Step executions using Stage execution ID. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#re-execute_1","title":"re-execute","text":"<p>Re-execute Step's execution with EXECUTION_ID saved in Cryton.</p> <p>EXECUTION_ID is ID of the Step's execution you want to re-execute.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#report_3","title":"report","text":"<p>Create report for Step's execution with EXECUTION_ID saved in Cryton.</p> <p>EXECUTION_ID is ID of the Step's execution you want to create report for.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - file (<code>-f</code>, <code>--file</code>) - File to save the report to (default is /tmp). - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#show_7","title":"show","text":"<p>Show Step's execution with EXECUTION_ID saved in Cryton.</p> <p>EXECUTION_ID is ID of the Step's execution you want to see.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#stop_3","title":"stop","text":"<p>Stop Step's execution with EXECUTION_ID saved in Cryton.</p> <p>EXECUTION_ID is ID of the Step's execution you want to stop.</p> <p>Arguments: - EXECUTION_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#steps","title":"steps","text":"<p>Manage Steps from here.</p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#create_5","title":"create","text":"<p>Create Step from FILE and add it to Stage with STAGE_ID.</p> <p>STAGE_ID is an ID of the Stage you want to add the Stage to.</p> <p>FILE is a path to the file containing the Step template.</p> <p>Arguments: - STAGE_ID - FILE  </p> <p>Options: - inventory_files (<code>-i</code>, <code>--inventory-file</code>) - Inventory file used to fill the template. Can be used multiple times. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#delete_8","title":"delete","text":"<p>Delete Step with STEP_ID saved in Cryton.</p> <p>STEP_ID is ID of the Step you want to delete.</p> <p>Arguments: - STEP_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#execute_2","title":"execute","text":"<p>Execute Step with STEP_ID under Stage execution with STAGE_EXECUTION_ID.</p> <p>STEP_ID is ID of the Step you want to execute.</p> <p>STAGE_EXECUTION_ID is an ID of the Stage execution you want to set as a parent of the Step execution.</p> <p>Arguments: - STEP_ID - STAGE_EXECUTION_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#list_9","title":"list","text":"<p>List existing Steps in Cryton.</p> <p>Options: - parameter_filters (<code>-f</code>, <code>--filter</code>) - Filter results using returned parameters (for example <code>id 1</code>, <code>name value</code>). - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - limit (<code>-l</code>, <code>--limit</code>) - Number of results to return per page. - offset (<code>-o</code>, <code>--offset</code>) - The initial index from which to return the results. - less (<code>--less</code>) - Show less like output. - parent (<code>-p</code>, <code>--parent</code>) - Filter Steps using Stage ID. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#show_8","title":"show","text":"<p>Show Step with STEP_ID saved in Cryton.</p> <p>STEP_ID is ID of the Step you want to see.</p> <p>Arguments: - STEP_ID  </p> <p>Options: - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#validate_2","title":"validate","text":"<p>Validate FILE containing step against a stage with STAGE_ID.</p> <p>FILE is path/to/your/file that you want to validate.</p> <p>STAGE_ID is an ID of the stage you want to validate the step against.</p> <p>Arguments: - FILE - STAGE_ID  </p> <p>Options: - inventory_files (<code>-i</code>, <code>--inventory-file</code>) - Inventory file used to fill the template. Can be used multiple times. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#workers","title":"workers","text":"<p>Manage Workers from here.</p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#create_6","title":"create","text":"<p>Create new Worker with NAME.</p> <p>NAME of your Worker (will be used to match your Worker). For example: \"MyCustomName\".</p> <p>Arguments: - NAME  </p> <p>Options: - description (<code>-d</code>, <code>--description</code>) - Description of your Worker (wrap in \"\"). - force (<code>-f</code>, <code>--force</code>) - Ignore, if Worker with the same parameter 'name' exists. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#delete_9","title":"delete","text":"<p>Delete Worker with WORKER_ID saved in Cryton.</p> <p>WORKER_ID is ID of the Worker you want to delete.</p> <p>Arguments: - WORKER_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#health-check","title":"health-check","text":"<p>Check if Worker with WORKER_ID is online.</p> <p>WORKER_ID is ID of the Worker you want to check.</p> <p>Arguments: - WORKER_ID  </p> <p>Options: - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#list_10","title":"list","text":"<p>List existing Workers.</p> <p>Options: - parameter_filters (<code>-f</code>, <code>--filter</code>) - Filter results using returned parameters (for example <code>id 1</code>, <code>name value</code>). - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - limit (<code>-l</code>, <code>--limit</code>) - Number of results to return per page. - offset (<code>-o</code>, <code>--offset</code>) - The initial index from which to return the results. - less (<code>--less</code>) - Show less like output. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/cli/#show_9","title":"show","text":"<p>Show Worker with WORKER_ID.</p> <p>WORKER_ID is ID of the Worker you want to see.</p> <p>Arguments: - WORKER_ID  </p> <p>Options: - less (<code>--less</code>) - Show less like output. - localize (<code>--localize</code>) - Convert UTC datetime to local timezone. - help (<code>--help</code>) - Show this message and exit.  </p>"},{"location":"interfaces/frontend/","title":"Frontend","text":"<p>Cryton Frontend provides functionality for interacting with Cryton Core more easily and clearly than by using CLI.</p> <p>By default, the Frontend is served at http://localhost:8080/.</p> <p>Use the in-app help pages to learn about usage.</p> <p>Update settings at runtime</p> <p>It is possible to update the REST API host and port at runtime at http://localhost:8080/app/user/settings.</p>"},{"location":"interfaces/frontend/#features","title":"Features","text":""},{"location":"interfaces/frontend/#listing-data","title":"Listing data","text":"<p>You can list all Cryton data by using list pages in the navigation bar. Most important data can be found directly in  the dashboard. Each data table provides functionality for sorting and filtering data.</p>"},{"location":"interfaces/frontend/#creating-objects","title":"Creating objects","text":"<p>You can create workers, templates, instances, and runs by using create pages in the navigation bar. Every object can be  also deleted from its list page.</p>"},{"location":"interfaces/frontend/#template-creation","title":"Template creation","text":"<p>You can create plan templates in the Plan templates &gt; Create template. The whole creation process is documented  in-app with an introduction page and additional help pages for every creation step.</p>"},{"location":"interfaces/frontend/#run-interaction","title":"Run interaction","text":"<p>The front end provides 2 ways to interact with runs. There is a quick interaction menu that you can access in  Runs &gt; List runs by clicking on a run. The interaction menu will expand under the run. Another way is to click  on the eye icon next to the run which will take you to the run's page. There you can also view the current state of the run  and its sub-parts, and modify the execution variables for each execution.</p>"},{"location":"interfaces/frontend/#execution-timeline","title":"Execution timeline","text":"<p>You can view timelines of the run's executions by clicking on the clock icon next to a run on the list runs page or by  clicking on the show timeline button on the run's page. The timeline shows the start, pause and finish times of the whole  execution, stages, and steps. More details can be found in an in-app help page found inside the timeline tab.</p>"},{"location":"interfaces/frontend/#theming","title":"Theming","text":"<p>The front end provides two color themes - light and dark. You can switch between them with a toggle button in the top bar.</p>"},{"location":"interfaces/frontend/#settings","title":"Settings","text":"<p>Cryton Frontend uses environment variables for its settings. Please update them to your needs.</p> <p>Notice</p> <p>For now, settings can be changed only for the npm installation. However, it is possible to update the API host and port at runtime at  http://localhost:8080/app/user/settings.</p> <p>Variables can be found in <code>src/environments/</code>. For production modify the environment.prod.ts file, else modify the environment.ts file.</p>"},{"location":"interfaces/frontend/#crytonrestapihost","title":"crytonRESTApiHost","text":"<p>Cryton Core's API address.</p> value default example string 127.0.0.1 cryton-hive"},{"location":"interfaces/frontend/#crytonrestapiport","title":"crytonRESTApiPort","text":"<p>Cryton Core's API port.</p> value default example int 8000 8008"},{"location":"interfaces/frontend/#refreshdelay","title":"refreshDelay","text":"<p>Sets artificial delay in milliseconds for refresh API requests.</p> What is this for? <p>Users usually react better if the requests don't happen instantly, but they can see a tiny bit of loading.  Initial API request doesn't use delay, this is only for refreshing data</p> value default example int 300 500"},{"location":"interfaces/frontend/#usehttps","title":"useHttps","text":"<p>Use SSL to connect to REST API.</p> value default example boolean false true"},{"location":"interfaces/rest-api/","title":"REST API","text":"<p>This page provides information about the (self-hosted) interactive documentation of the Cryton REST API endpoints. It also provides a list of changes and some important notes.</p> <p>To access the Swagger or Redoc pages, install and start the Cryton Hive application as described here or here.</p> <p>Uploading files</p> <p>Files must be uploaded as bytes and encoded using UTF-8.</p>"},{"location":"interfaces/rest-api/#swagger-interactive-documentation","title":"Swagger interactive documentation","text":"<p>If you are interested in the Swagger interactive documentation, open the Cryton REST API or browse to the <code>/doc</code> endpoint. For example: http://127.0.0.1:8000/doc/.</p> <p></p>"},{"location":"interfaces/rest-api/#redoc-interactive-documentation","title":"Redoc interactive documentation","text":"<p>If you are interested in the Redoc interactive documentation, browse to the <code>/redoc</code> endpoint on Cryton REST API. For example: http://127.0.0.1:8000/redoc/.</p> <p></p>"},{"location":"interfaces/rest-api/#api-changes","title":"API changes","text":"<p>There are no changes.</p>"},{"location":"modules/","title":"Modules","text":"<p>As mentioned before, modules are Python scripts/packages that wrap tools and orchestrate them.</p> <p>Module execution is done by Workers. All you need to do is to create a Step that will use your desired module.</p> <p>Each module returns the following:</p> Parameter name Parameter description <code>result</code> <code>ok</code> - execution finished successfully  <code>fail</code> - execution finished unsuccessfully  <code>error</code> - an error occurred before the module could finish <code>output</code> Output or errors from the execution <code>serialized_output</code> Machine readable output in JSON that can accessed in other modules as input <p>Modules mentioned in the current section (check the navigation on the left) are bundled in the Worker installation and work out of the box.</p>"},{"location":"modules/#installing-unofficial-modules","title":"Installing unofficial modules","text":"<p>Installing unofficial module(s) is pretty straight forward.</p> <ol> <li>Find the desired module on PyPI or git (look for the <code>cryton-modules-</code> prefix)</li> <li>Install the module(s)</li> </ol> pipxpip <pre><code>pipx inject cryton &lt;package&gt;\n</code></pre> <pre><code>pipx inject cryton git+&lt;git-url&gt;\n</code></pre> <p>Check here for examples.</p> <p>Activate the virtual environment (<code>source /path/to/venv/bin/activate</code>) or use its PIP executable (<code>/path/to/venv/bin/pip</code>).</p> <pre><code>pip install &lt;package&gt;\n</code></pre> <pre><code>pip install git+&lt;git-url&gt;\n</code></pre> <p>Check here for more information about installing packages and here for installing packages from VCS.</p> <ul> <li> <p>Since the version 2.0.0, installing modules using the modules directory is deprecated</p> </li> <li> <p>Do not forget to check the instructions of the package you're about to install</p> </li> </ul>"},{"location":"modules/list/atomic-red-team/","title":"Atomic Red Team","text":""},{"location":"modules/list/atomic-red-team/#description","title":"Description","text":"<p>Module orchestrates Atomic Red Team using the Invoke-Atomic Powershell module.</p> <p>It also gives you the option to select or install Powershell on the target system.</p> <p>NOTE: OSX is unsupported.</p>"},{"location":"modules/list/atomic-red-team/#prerequisites","title":"Prerequisites","text":"<p>Powershell on the target system and a valid/working Metasploit session on the target system.</p> <p>If the target system is Windows, make sure to update the <code>Virus &amp; threat protections settings</code>.</p>"},{"location":"modules/list/atomic-red-team/#input-parameters","title":"Input parameters","text":"SimpleCustom"},{"location":"modules/list/atomic-red-team/#technique","title":"<code>technique</code>","text":"<p>ID of the Atomic technique (possibly with test IDs defined using short form).</p> Name Type Required Default value Example value <code>technique</code> string \u2713 <code>T1222.002</code> <code>T1222.002-1,2</code>"},{"location":"modules/list/atomic-red-team/#test_guids","title":"<code>test_guids</code>","text":"<p>Test GUIDs to run.</p> Name Type Required Default value Example value <code>test_guids</code> array[string] \u2717 <code>[\"34...-690adf36a135\", \"fc...-381f5c35aff3\"]</code>"},{"location":"modules/list/atomic-red-team/#parameters","title":"<code>parameters</code>","text":"<p>Input arguments for the test(s).</p> Name Type Required Default value Example value <code>parameters</code> object \u2717 <code>{\"numeric_mode\": \"700\"}</code>"},{"location":"modules/list/atomic-red-team/#command","title":"<code>command</code>","text":"<p>Custom Atomic command.</p> Name Type Required Default value Example value <code>command</code> string \u2713 <code>Invoke-AtomicTest T1222.001 -InputArgs @{\"a\"=\"b\"}</code>"},{"location":"modules/list/atomic-red-team/#session_id","title":"<code>session_id</code>","text":"<p>Metasploit session ID to use.</p> Name Type Required Default value Example value <code>session_id</code> integer \u2713 <code>1</code>"},{"location":"modules/list/atomic-red-team/#powershell","title":"<code>powershell</code>","text":"<p>Powershell related options.</p> Name Type Required Default value Example value <code>powershell</code> object \u2717 <code>{}</code> <code>{\"install\": true}</code> <p>Only one of the two following properties can be set.</p>"},{"location":"modules/list/atomic-red-team/#executable","title":"<code>executable</code>","text":"<p>Path to Powershell executable.</p> Name Type Required Default value Example value <code>executable</code> string \u2717 <code>powershell.exe</code>"},{"location":"modules/list/atomic-red-team/#install","title":"<code>install</code>","text":"<p>Whether to auto install Powershell.</p> Name Type Required Default value Example value <code>install</code> boolean \u2717 <code>false</code> <code>true</code>"},{"location":"modules/list/atomic-red-team/#examples","title":"Examples","text":""},{"location":"modules/list/atomic-red-team/#execute-technique-and-all-of-its-tests-including-powershell-installation","title":"Execute technique and all of its tests (including Powershell installation)","text":"<p>Input: <pre><code>my-step:\n  module: atomic_red_team\n  arguments:\n    session_id: 1\n    technique: T1222.002\n    powershell:\n      install: true\n</code></pre></p> <p>Output:</p> <pre><code>{\n  \"result\": \"ok\",\n  \"output\": \"PathToAtomicsFolder = /home/test/AtomicRedTeam/atomics\\n\\nExecuting test: T1222.002-1 chmod - Change file or folder mode (numeric mode)\\nchmod: cannot access '/tmp/AtomicRedTeam/atomics/T1222.002': No such file or directory\\nExit code: 1\\nDone executing test: T1222.002-1 chmod - Change file or folder mode (numeric mode)\\n\", \n  \"serialized_output\": {}\n}\n</code></pre>"},{"location":"modules/list/atomic-red-team/#execute-specific-test-with-custom-parameters","title":"Execute specific test with custom parameters","text":"<p>Input: <pre><code>my-step:\n  module: atomic_red_team\n  arguments:\n    session_id: 1\n    technique: T1222.002\n    test_guids: \n      - 34ca1464-de9d-40c6-8c77-690adf36a135\n    parameters:\n      numeric_mode: 700\n      file_or_folder: /tmp/file\n</code></pre></p> <p>Output:</p> <pre><code>{\n  \"result\": \"ok\",\n  \"output\": \"PathToAtomicsFolder = /home/test/AtomicRedTeam/atomics\\n\\nExecuting test: T1222.002-1 chmod - Change file or folder mode (numeric mode)\\nchmod: cannot access '/tmp/AtomicRedTeam/atomics/T1222.002': No such file or directory\\nExit code: 1\\nDone executing test: T1222.002-1 chmod - Change file or folder mode (numeric mode)\\n\", \n  \"serialized_output\": {}\n}\n</code></pre>"},{"location":"modules/list/atomic-red-team/#run-custom-atomic-command","title":"Run custom Atomic command","text":"<p>Input: <pre><code>my-step:\n  module: atomic_red_team\n  arguments:\n    session_id: 1\n    command: Invoke-AtomicTest T1222.001\n</code></pre></p> <p>Output:</p> <pre><code>{\n  \"result\": \"ok\",\n  \"output\": \"PathToAtomicsFolder = /home/test/AtomicRedTeam/atomics\\n\\nExecuting test: T1222.002-1 chmod - Change file or folder mode (numeric mode)\\nchmod: cannot access '/tmp/AtomicRedTeam/atomics/T1222.002': No such file or directory\\nExit code: 1\\nDone executing test: T1222.002-1 chmod - Change file or folder mode (numeric mode)\\n\", \n  \"serialized_output\": {}\n}\n</code></pre>"},{"location":"modules/list/atomic-red-team/#troubleshooting","title":"Troubleshooting","text":"<p>So far so good.</p>"},{"location":"modules/list/atomic-red-team/#output-serialization","title":"Output serialization","text":"<p>Not available at the moment.</p>"},{"location":"modules/list/command/","title":"Command","text":""},{"location":"modules/list/command/#description","title":"Description","text":"<p>A module that allows local and remote command execution.</p> <p>The module is used to run a single shell command.  By default, the command is executed locally. If you specify a session, it will be executed in the respective session's context.</p>"},{"location":"modules/list/command/#prerequisites","title":"Prerequisites","text":"<p>In case you want to execute code remotely, Metasploit must be accessible from Worker it will be executed on.</p>"},{"location":"modules/list/command/#input-parameters","title":"Input parameters","text":""},{"location":"modules/list/command/#command","title":"<code>command</code>","text":"<p>Command to execute.</p> Name Type Required Default value Example value <code>command</code> string \u2713 <code>whoami</code>"},{"location":"modules/list/command/#timeout","title":"<code>timeout</code>","text":"<p>Timeout for the command (in seconds).</p> Name Type Required Default value Example value <code>timeout</code> integer \u2717 <code>60</code>"},{"location":"modules/list/command/#session_id","title":"<code>session_id</code>","text":"<p>Metasploit session to use.</p> Name Type Required Default value Example value <code>session_id</code> integer \u2717 <code>1</code>"},{"location":"modules/list/command/#serialize_output","title":"<code>serialize_output</code>","text":"<p>Try to parse the output of the command into <code>serialized_output</code>.</p> Name Type Required Default value Example value <code>serialize_output</code> boolean \u2717 <code>false</code> <code>true</code>"},{"location":"modules/list/command/#force_shell","title":"<code>force_shell</code>","text":"<p>Run the command in shell even in a Meterpreter session. To run the command in the Meterpreter shell (if available), set this to <code>false</code>.</p> Name Type Required Default value Example value <code>force_shell</code> boolean \u2717 <code>true</code> <code>false</code>"},{"location":"modules/list/command/#examples","title":"Examples","text":""},{"location":"modules/list/command/#read-file-on-remote-system-using-session","title":"Read file on remote system using session","text":"<p>Input: <pre><code>my-step:\n  module: command\n  arguments:\n    command: cat /etc/passwd\n    session_id: 1\n</code></pre></p> <p>Output: <pre><code>{\n  \"result\": \"ok\",\n  \"output\": \"&lt;contents of passwd file on target&gt;\",\n  \"serialized_output\": {}\n}\n</code></pre></p>"},{"location":"modules/list/command/#troubleshooting","title":"Troubleshooting","text":"<p>So far so good.</p>"},{"location":"modules/list/command/#meterpreter-vs-shell-session","title":"Meterpreter vs shell session","text":"<p>By default, if you specified a session, this module will try to execute the provided command in a shell. For more details about different sessions, see here.</p>"},{"location":"modules/list/command/#output-serialization","title":"Output serialization","text":"<p>Automatic output serialization is an experimental feature. It allows you to take the output and use it in other modules in the form of a <code>serialized_output</code>. For this to work, the command output must be a valid JSON (<code>\"some text\"</code>, <code>{\"a\": \"b\"}</code>, <code>[\"a\", \"b\"]</code>).</p> <p>It is in an experimental state primarily due to the randomness of the MSF shells and Windows combination. If you encounter any errors, please submit an issue.</p>"},{"location":"modules/list/command/#examples_1","title":"Examples","text":"<p>whoami on Linux (Debian): <code>echo \\\\\"$(whoami)\\\\\"</code> <pre><code>{\n  \"output\": \"\\\"username\\\"\",\n  \"serialized_output\": {\"auto_serialized\": \"username\"}\n}\n</code></pre></p> <p>whoami on Windows 10: <code>Powershell -C \"whoami | ConvertTo-Json\"</code> <pre><code>{\n  \"output\": \"\\\"username\\\"\",\n  \"serialized_output\": {\"auto_serialized\": \"username\"}\n}\n</code></pre></p>"},{"location":"modules/list/empire/","title":"Empire","text":""},{"location":"modules/list/empire/#description","title":"Description","text":"<p>Module orchestrates Empire. It allows you to deploy and use its agents.</p>"},{"location":"modules/list/empire/#prerequisites","title":"Prerequisites","text":"<p>Empire C2 server must be accessible from Worker it will be executed on.</p>"},{"location":"modules/list/empire/#input-parameters","title":"Input parameters","text":""},{"location":"modules/list/empire/#agent_name","title":"<code>agent_name</code>","text":"<p>Name of the deployed agent.</p> Name Type Required Default value Example value <code>agent_name</code> string \u2713 <code>myAgent</code>"},{"location":"modules/list/empire/#action","title":"<code>action</code>","text":"<p>Which type of action you want to perform.</p> <p>Current options are:</p> <ul> <li><code>deploy</code> - deploy a new agent</li> <li><code>execute-command</code> - execute a command on an existing agent</li> <li><code>execute-module</code> - execute an Empire module on an existing agent</li> </ul> Name Type Required Default value Example value <code>action</code> string \u2713 <code>deploy</code> Deploy agentExecute commandExecute module"},{"location":"modules/list/empire/#session_id","title":"<code>session_id</code>","text":"<p>Metasploit session to use.</p> Name Type Required Default value Example value <code>session_id</code> integer \u2713 <code>1</code>"},{"location":"modules/list/empire/#listener","title":"<code>listener</code>","text":"<p>Arguments used for listener creation.</p> Name Type Required Default value Example value <code>listener</code> object \u2713 <code>{\"name\": \"my-name\"}</code>"},{"location":"modules/list/empire/#name","title":"<code>name</code>","text":"<p>Name of listener in Empire for identification. If listener with this name already exists in Empire, it will be used for stager generation.</p> Name Type Required Default value Example value <code>name</code> string \u2713 <code>myName</code>"},{"location":"modules/list/empire/#port","title":"<code>port</code>","text":"<p>Port on which should be listener communicating with Agents.</p> Name Type Required Default value Example value <code>port</code> integer \u2717 <code>80</code> <code>8080</code>"},{"location":"modules/list/empire/#type","title":"<code>type</code>","text":"<p>Type of the listener.</p> Name Type Required Default value Example value <code>type</code> string \u2717 <code>http</code> <code>smb</code>"},{"location":"modules/list/empire/#options","title":"<code>options</code>","text":"<p>Additional adjustable parameters for creating listener. More on here.</p> Name Type Required Default value Example value <code>options</code> object \u2717 <code>{\"BindIP\": \"0.0.0.0\"}</code>"},{"location":"modules/list/empire/#stager","title":"<code>stager</code>","text":"<p>Arguments used for stager creation.</p> Name Type Required Default value Example value <code>stager</code> object \u2713 <code>{\"type\": \"multi/bash\"}</code>"},{"location":"modules/list/empire/#type_1","title":"<code>type</code>","text":"<p>Type of stager that should be generated in form of path. For stager types look here.</p> Name Type Required Default value Example value <code>type</code> string \u2713 <code>multi/bash</code>"},{"location":"modules/list/empire/#options_1","title":"<code>options</code>","text":"<p>Additional adjustable parameters for generating stager. Parameters can be viewed in individual stager python files or through Empire client.</p> Name Type Required Default value Example value <code>options</code> object \u2717 <code>{\"Language\": \"python\"}</code>"},{"location":"modules/list/empire/#command","title":"<code>command</code>","text":"<p>Command to execute on the agent.</p> Name Type Required Default value Example value <code>command</code> string \u2713 <code>whoami</code>"},{"location":"modules/list/empire/#module","title":"<code>module</code>","text":"<p>Arguments used for Empire module execution.</p> Name Type Required Default value Example value <code>module</code> object \u2713 <code>{\"name\": \"collection/sniffer\"}</code>"},{"location":"modules/list/empire/#name_1","title":"<code>name</code>","text":"<p>Name of the Empire module in form of a path. Available Empire modules here.</p> Name Type Required Default value Example value <code>name</code> string \u2713 <code>collection/sniffer</code>"},{"location":"modules/list/empire/#arguments","title":"<code>arguments</code>","text":"<p>Additional arguments for the Empire module.</p> Name Type Required Default value Example value <code>arguments</code> object \u2717 <code>{\"IpFilter\": \"127.0.0.1\"}</code>"},{"location":"modules/list/empire/#examples","title":"Examples","text":""},{"location":"modules/list/empire/#deploy-agent","title":"Deploy agent","text":"<p>Input:</p> <pre><code>my-step:\n  module: empire\n  arguments:\n    action: deploy\n    agent_name: MyAgent\n    session_id: 1\n    listener:\n      name: testing\n    stager:\n      type: multi/bash\n</code></pre> <p>Output:</p> <pre><code>{\n  \"result\": \"ok\",\n  \"output\": \"Agent 'MyAgent' deployed on target 192.168.61.12.\",\n  \"serialized_output\": {}\n}\n</code></pre>"},{"location":"modules/list/empire/#execute-command-on-agent","title":"Execute command on agent","text":"<p>Input:</p> <pre><code>my-step:\n  module: empire\n  arguments:\n    action: execute-command\n    agent_name: MyAgent\n    command: whoami\n</code></pre> <p>Output:</p> <pre><code>{\n  \"result\": \"ok\",\n  \"output\": \"{'agent': 'E5XSKQ4F', 'command': 'whoami', 'results': 'victim', 'taskID': 2, 'user_id': 1, 'username': 'empireadmin'}\",\n  \"serialized_output\": {}\n}\n</code></pre>"},{"location":"modules/list/empire/#execute-module-on-agent","title":"Execute module on agent","text":"<p>Input:</p> <pre><code>my-step:\n  module: empire\n  arguments:\n    action: execute-module\n    agent_name: MyAgent\n    module:\n      name: collection/sniffer\n      arguments:\n        IpFilter: 192.168.33.12\n        PortFilter: 1234\n</code></pre> <p>Output:</p> <pre><code>{\n  \"result\": \"ok\",\n  \"output\": \"&lt;output from the module execution&gt;\",\n  \"serialized_output\": {}\n}\n</code></pre>"},{"location":"modules/list/empire/#troubleshooting","title":"Troubleshooting","text":"<p>Only the 4.10.0 version is supported.</p> <ul> <li>Some Metasploit sessions may be unsuitable for deploying Empire agents</li> <li>Make sure the Empire host is set correctly in the scenario and is reachable from the target</li> <li>Currently, the <code>multi/launcher</code> option is the recommended stager for use with Windows machines</li> <li>For Empire stagers to work on newer versions of Windows OS, you need to disable all firewall and antivirus   protection on the target</li> </ul>"},{"location":"modules/list/empire/#output-serialization","title":"Output serialization","text":"<p>The output is not serialized.</p>"},{"location":"modules/list/ffuf/","title":"FFUF","text":""},{"location":"modules/list/ffuf/#description","title":"Description","text":"<p>A module for web fuzzing using the FFUF tool.</p> <p>This module runs FFUF on given target and returns a file with found directories.</p>"},{"location":"modules/list/ffuf/#prerequisites","title":"Prerequisites","text":"<p>FFUF must be installed.</p>"},{"location":"modules/list/ffuf/#input-parameters","title":"Input parameters","text":"SimpleCustom"},{"location":"modules/list/ffuf/#target","title":"<code>target</code>","text":"<p>Scan target.</p> Name Type Required Default value Example value <code>target</code> string \u2713 <code>http://127.0.0.1:8000/FUZZ</code>"},{"location":"modules/list/ffuf/#wordlist","title":"<code>wordlist</code>","text":"<p>The wordlist for fuzzing the webserver.</p> Name Type Required Default value Example value <code>wordlist</code> string \u2713 <code>/usr/share/wordlists/dirb/small.txt</code>"},{"location":"modules/list/ffuf/#options","title":"<code>options</code>","text":"<p>Additional FFUF parameters.</p> Name Type Required Default value Example value <code>options</code> string \u2717 <code>-X POST</code>"},{"location":"modules/list/ffuf/#serialize_output","title":"<code>serialize_output</code>","text":"<p>Use FFUF's serialization (<code>-of json -o file</code>).</p> Name Type Required Default value Example value <code>serialize_output</code> boolean \u2717 <code>true</code> <code>false</code>"},{"location":"modules/list/ffuf/#command","title":"<code>command</code>","text":"<p>FFUF command to run with syntax as in command line (with executable).</p> Name Type Required Default value Example value <code>command</code> string \u2713 <code>ffuf -u http://127.0.0.1/FUZZ</code>"},{"location":"modules/list/ffuf/#examples","title":"Examples","text":""},{"location":"modules/list/ffuf/#example-with-serialized-output","title":"Example with serialized output","text":"<p>Input: <pre><code>my-step:\n  module: ffuf\n  arguments:\n    target: {{ target }}\n    wordlist: \"/usr/share/wordlists/dirb/small.txt\"\n    options: -X POST\n</code></pre></p> <p>Output: <pre><code>{\"time\":\"2023-05-16T12:04:36+02:00\",\"config\":{\"sni\":\"\",\"url\":\"http://172.16.169.128/FUZZ\",\"json\":false,\"rate\":0,\"delay\":{\"value\":\"0.00\"},\"fmode\":\"or\",\"http2\":false,\"mmode\":\"or\",\"quiet\":false,\"colors\":false,\"method\":\"POST\",\"cmdline\":\"ffuf -w /usr/share/wordlists/dirb/small.txt -u http://172.16.169.128/FUZZ -of json -o /tmp/cryton-ffuf-1684231474.215272.tmp -X POST\",\"headers\":{},\"maxtime\":0,\"threads\":40,\"timeout\":10,\"verbose\":false,\"debuglog\":\"\",\"matchers\":{\"Mutex\":{},\"Filters\":{},\"Matchers\":{\"status\":{\"value\":\"200,204,301,302,307,401,403,405,500\"}},\"IsCalibrated\":false,\"PerDomainFilters\":{}},\"postdata\":\"\",\"proxyurl\":\"\",\"scrapers\":\"all\",\"stop_403\":false,\"stop_all\":false,\"inputmode\":\"clusterbomb\",\"recursion\":false,\"wordlists\":[\"/usr/share/wordlists/dirb/small.txt\"],\"configfile\":\"\",\"extensions\":[],\"ignorebody\":false,\"inputshell\":\"\",\"outputfile\":\"/tmp/cryton-ffuf-1684231474.215272.tmp\",\"maxtime_job\":0,\"requestfile\":\"\",\"scraperfile\":\"\",\"stop_errors\":false,\"cmd_inputnum\":100,\"outputformat\":\"json\",\"requestproto\":\"https\",\"inputproviders\":[{\"name\":\"wordlist\",\"value\":\"/usr/share/wordlists/dirb/small.txt\",\"keyword\":\"FUZZ\",\"template\":\"\"}],\"noninteractive\":false,\"replayproxyurl\":\"\",\"autocalibration\":false,\"outputdirectory\":\"\",\"recursion_depth\":0,\"follow_redirects\":false,\"recursion_strategy\":\"default\",\"OutputSkipEmptyFile\":false,\"autocalibration_keyword\":\"FUZZ\",\"autocalibration_perhost\":false,\"autocalibration_strings\":[],\"dirsearch_compatibility\":false,\"autocalibration_strategy\":\"basic\",\"ignore_wordlist_comments\":false},\"results\":[],\"commandline\":\"ffuf -w /usr/share/wordlists/dirb/small.txt -u http://172.16.169.128/FUZZ -of json -o /tmp/cryton-ffuf-1684231474.215272.tmp -X POST\"}\n</code></pre></p>"},{"location":"modules/list/ffuf/#example-with-text-output","title":"Example with text output","text":"<p>Input: <pre><code>my-step:\n  module: ffuf\n  arguments:\n    target: {{ target }}\n    options: --max-threads 7\n    serialize_output: False\n</code></pre></p> <p>Output: <pre><code>/'___\\ /'___\\ /'___\\ /\\ \\__/ /\\ \\__/ __ __ /\\ \\__/ \\ \\ ,__\\\\ \\ ,__\\/\\ \\/\\ \\ \\ \\ ,__\\ \\ \\ \\_/ \\ \\ \\_/\\ \\ \\_\\ \\ \\ \\ \\_/ \\ \\_\\ \\ \\_\\ \\ \\____/ \\ \\_\\ \\/_/ \\/_/ \\/___/ \\/_/ v2.0.0-dev ________________________________________________ :: Method : POST :: URL : http://172.16.169.128/FUZZ :: Wordlist : FUZZ: /usr/share/wordlists/dirb/small.txt :: Output file : /tmp/cryton-ffuf-1684231474.215272.tmp :: File format : json :: Follow redirects : false :: Calibration : false :: Timeout : 10 :: Threads : 40 :: Matcher : Response status: 200,204,301,302,307,401,403,405,500 ________________________________________________ \u001b[2K:: Progress: [40/959] :: Job [1/1] :: 0 req/sec :: Duration: [0:00:00] :: Errors: 0 :: \u001b[2K:: Progress: [492/959] :: Job [1/1] :: 0 req/sec :: Duration: [0:00:00] :: Errors: 0 :: \u001b[2K:: Progress: [959/959] :: Job [1/1] :: 0 req/sec :: Duration: [0:00:00] :: Errors: 0 :: \u001b[2K:: Progress: [959/959] :: Job [1/1] :: 121 req/sec :: Duration: [0:00:01] :: Errors: 0 ::\n</code></pre></p>"},{"location":"modules/list/ffuf/#troubleshooting","title":"Troubleshooting","text":"<p>So far so good.</p>"},{"location":"modules/list/ffuf/#output-serialization","title":"Output serialization","text":"<p>Output is serialized by FFUF itself.</p>"},{"location":"modules/list/medusa/","title":"Medusa","text":""},{"location":"modules/list/medusa/#description","title":"Description","text":"<p>This module implements attacking capabilities of the Medusa bruteforce tool.</p>"},{"location":"modules/list/medusa/#prerequisites","title":"Prerequisites","text":"<p>Medusa must be installed.</p>"},{"location":"modules/list/medusa/#input-parameters","title":"Input parameters","text":"SimpleCustom"},{"location":"modules/list/medusa/#target","title":"<code>target</code>","text":"<p>Bruteforce target.</p> Name Type Required Default value Example value <code>target</code> string \u2713 <code>127.0.0.1</code>"},{"location":"modules/list/medusa/#mod","title":"<code>mod</code>","text":"<p>mod (service) to attack.</p> Name Type Required Default value Example value <code>mod</code> string \u2717 <code>ssh</code> <code>ftp</code>"},{"location":"modules/list/medusa/#tasks","title":"<code>tasks</code>","text":"<p>Number of login pairs tested concurrently.</p> Name Type Required Default value Example value <code>tasks</code> integer \u2717 <code>4</code> <code>8</code>"},{"location":"modules/list/medusa/#options","title":"<code>options</code>","text":"<p>Additional Medusa parameters.</p> Name Type Required Default value Example value <code>options</code> string \u2717 <code>-t 3</code>"},{"location":"modules/list/medusa/#credentials","title":"<code>credentials</code>","text":"<p>Group for credentials input.</p> Name Type Required Default value Example value <code>credentials</code> object \u2713 <code>{\"combo_file\": \"/path/to/file\"}</code> <p>Specify either <code>combo_file</code> or one of each username (<code>username</code>/<code>username_file</code>) and password (<code>password</code>/<code>password_file</code>) parameters:</p>"},{"location":"modules/list/medusa/#username","title":"<code>username</code>","text":"<p>Username to bruteforce.</p> Name Type Required Default value Example value <code>username</code> string \u2717 <code>username</code>"},{"location":"modules/list/medusa/#username_file","title":"<code>username_file</code>","text":"<p>Absolute path to file with usernames to bruteforce.</p> Name Type Required Default value Example value <code>username_file</code> string \u2717 <code>/path/to/file</code>"},{"location":"modules/list/medusa/#password","title":"<code>password</code>","text":"<p>Password to bruteforce.</p> Name Type Required Default value Example value <code>password</code> string \u2717 <code>password</code>"},{"location":"modules/list/medusa/#password_file","title":"<code>password_file</code>","text":"<p>Absolute path to file with passwords to bruteforce.</p> Name Type Required Default value Example value <code>password_file</code> string \u2717 <code>/path/to/file</code>"},{"location":"modules/list/medusa/#combo_file","title":"<code>combo_file</code>","text":"<p>Absolute path to file with login pairs to bruteforce. The file should be in format <code>username:password</code>. More information can be found here.</p> Name Type Required Default value Example value <code>combo_file</code> string \u2717 <code>/path/to/file</code>"},{"location":"modules/list/medusa/#command","title":"<code>command</code>","text":"<p>Medusa command to run with syntax as in command line (with executable).</p> Name Type Required Default value Example value <code>command</code> string \u2713 <code>medusa -u user -p pass -h 127.0.0.1 -M ssh</code>"},{"location":"modules/list/medusa/#examples","title":"Examples","text":""},{"location":"modules/list/medusa/#ssh-bruteforce","title":"SSH bruteforce","text":"<p>Input: <pre><code>my-step:\n  module: medusa\n  arguments:\n    target: {{ target }}\n    raw_output: true\n    credentials:\n      username: vagrant\n      password: vagrant\n    tasks: 4\n</code></pre></p> <p>Output: <pre><code>{\n  \"result\": \"ok\", \n  \"output\": \"Medusa v2.2 [http://www.foofus.net] (C) JoMo-Kun / Foofus Networks &lt;jmk@foofus.net&gt;\\n\\nACCOUNT CHECK: [ssh] Host: 192.168.56.3 (1 of 1, 0 complete) User: vagrant (1 of 1, 0 complete) Password: vagrant (1 of 1 complete)\\nACCOUNT FOUND: [ssh] Host: 192.168.56.3 User: vagrant Password: vagrant [SUCCESS]\\n\", \n  \"serialized_output\": {\"username\": \"vagrant\", \"password\": \"vagrant\", \"all_credentials\": [{\"username\": \"vagrant\", \"password\": \"vagrant\"}]}\n}\n</code></pre></p>"},{"location":"modules/list/medusa/#custom-command","title":"Custom command","text":"<p>Input: <pre><code>my-step:\n  module: medusa\n  arguments:\n    command: medusa -t 4 -u vagrant -p vagrant -h {{ target }} -M ssh\n</code></pre></p> <p>Output: <pre><code>{\n  \"result\": \"ok\", \n  \"output\": \"Medusa v2.2 [http://www.foofus.net] (C) JoMo-Kun / Foofus Networks &lt;jmk@foofus.net&gt;\\n\\nACCOUNT CHECK: [ssh] Host: 192.168.56.3 (1 of 1, 0 complete) User: vagrant (1 of 1, 0 complete) Password: vagrant (1 of 1 complete)\\nACCOUNT FOUND: [ssh] Host: 192.168.56.3 User: vagrant Password: vagrant [SUCCESS]\\n\", \n  \"serialized_output\": {\"username\": \"vagrant\", \"password\": \"vagrant\", \"all_credentials\": [{\"username\": \"vagrant\", \"password\": \"vagrant\"}]}\n}\n</code></pre></p>"},{"location":"modules/list/medusa/#troubleshooting","title":"Troubleshooting","text":"<p>So far so good.</p>"},{"location":"modules/list/medusa/#output-serialization","title":"Output serialization","text":"<p>Only the credentials are serialized. They're parsed from the output.</p> <p><code>serialized_output</code> contains:</p> Parameter name Parameter description <code>username</code> First username found during bruteforce. <code>password</code> First password found during bruteforce. <code>all_credentials</code> List of dictionaries containing all the credentials found in bruteforce."},{"location":"modules/list/metasploit/","title":"Metasploit","text":""},{"location":"modules/list/metasploit/#description","title":"Description","text":"<p>Module orchestrates Metasploit Framework.</p>"},{"location":"modules/list/metasploit/#prerequisites","title":"Prerequisites","text":"<p>Metasploit must be accessible from Worker it will be executed on.</p>"},{"location":"modules/list/metasploit/#input-parameters","title":"Input parameters","text":"SimpleCustom"},{"location":"modules/list/metasploit/#module_name","title":"<code>module_name</code>","text":"<p>Name of Metasploit module.</p> Name Type Required Default value Example value <code>module_name</code> string \u2713 <code>unix/irc/unreal_ircd_3281_backdoor</code>"},{"location":"modules/list/metasploit/#datastore","title":"<code>datastore</code>","text":"<p>Datastore options (variables) to use for the execution. Basically an equivalent to <code>set OPTION value</code>.</p> Name Type Required Default value Example value <code>datastore</code> object \u2717 <code>{\"RHOST\": \"127.0.0.1\"}</code>"},{"location":"modules/list/metasploit/#commands","title":"<code>commands</code>","text":"<p>Custom set of commands to execute in an order in the Metasploit console.</p> Name Type Required Default value Example value <code>commands</code> array[string] \u2713 <code>[\"use multi/handler\", \"run -z\"]</code>"},{"location":"modules/list/metasploit/#timeout","title":"<code>timeout</code>","text":"<p>Number of seconds to wait before the module execution will be terminated.</p> Name Type Required Default value Example value <code>timeout</code> integer \u2717 <code>300</code>"},{"location":"modules/list/metasploit/#examples","title":"Examples","text":""},{"location":"modules/list/metasploit/#ssh-login-module","title":"SSH login module","text":"<p>Input: <pre><code>my-step:\n  module: metasploit\n  arguments:\n    module_name: scanner/ssh/ssh_login\n    datastore:\n      RHOSTS: {{ target }}\n      USERNAME: vagrant\n      PASSWORD: vagrant\n</code></pre></p> <p>Output: <pre><code>{\n  \"result\": \"ok\", \n  \"output\": \"VERBOSE =&gt; True\\nBRUTEFORCE_SPEED =&gt; 5\\nBLANK_PASSWORDS =&gt; false\\nUSER_AS_PASS =&gt; false\\nDB_ALL_CREDS =&gt; false\\nDB_ALL_USERS =&gt; false\\nDB_ALL_PASS =&gt; false\\nDB_SKIP_EXISTING =&gt; none\\nSTOP_ON_SUCCESS =&gt; false\\nREMOVE_USER_FILE =&gt; false\\nREMOVE_PASS_FILE =&gt; false\\nREMOVE_USERPASS_FILE =&gt; false\\nTRANSITION_DELAY =&gt; 0\\nMaxGuessesPerService =&gt; 0\\nMaxMinutesPerService =&gt; 0\\nMaxGuessesPerUser =&gt; 0\\nCreateSession =&gt; true\\nAutoVerifySession =&gt; true\\nTHREADS =&gt; 1\\nShowProgress =&gt; true\\nShowProgressPercent =&gt; 10\\nRPORT =&gt; 22\\nSSH_IDENT =&gt; SSH-2.0-OpenSSH_7.6p1 Ubuntu-4ubuntu0.3\\nSSH_TIMEOUT =&gt; 30\\nSSH_DEBUG =&gt; false\\nGatherProof =&gt; true\\nRHOSTS =&gt; 192.168.56.51\\nUSERNAME =&gt; vagrant\\nPASSWORD =&gt; vagrant\\nDisablePayloadHandler =&gt; True\\n[*] 192.168.56.51:22 - Starting bruteforce\\n[+] 192.168.56.51:22 - Success: 'vagrant:vagrant' 'uid=1000(vagrant) gid=1000(vagrant) groups=1000(vagrant) Linux vagrant-ubuntu-trusty-64 3.13.0-170-generic #220-Ubuntu SMP Thu May 9 12:40:49 UTC 2019 x86_64 x86_64 x86_64 GNU/Linux '\\n[!] No active DB -- Credential data will not be saved!\\n[*] SSH session 1 opened (192.168.56.50:36169 -&gt; 192.168.56.51:22) at 2022-08-04 17:03:56 +0200\\n[*] Scanned 1 of 1 hosts (100% complete)\\n[*] Auxiliary module execution completed\\n\",\n  \"serialized_output\": {\"session_id\": 1} \n}\n</code></pre></p>"},{"location":"modules/list/metasploit/#running-nmap","title":"Running Nmap","text":"<pre><code>my-step:\n  module: metasploit\n  arguments:\n    commands:\n      - db_nmap --top-ports 100 {{ target }}\n</code></pre>"},{"location":"modules/list/metasploit/#upgrade-shell-session","title":"Upgrade shell session","text":"<pre><code>my-step:\n  module: metasploit\n  arguments:\n    module_name: multi/manage/shell_to_meterpreter\n    datastore:\n      LHOST: {{ attacker_host }}\n      SESSION: 1\n</code></pre>"},{"location":"modules/list/metasploit/#troubleshooting","title":"Troubleshooting","text":"<p>So far so good.</p>"},{"location":"modules/list/metasploit/#session-types","title":"Session types","text":"<p>Metasploit Framework currently supports two types of sessions.</p> <p>The first is a shell session, in which you can run shell commands without limitations.</p> <p>The second is called Meterpreter session. It allows you to use it's provided commands, such as <code>ifconfig</code> or <code>sysinfo</code>. To run a command in a shell, you need to use the <code>execute</code> command with the <code>-f</code>, <code>-i</code>, and <code>-a</code> options (<code>execute -f &lt;command&gt; -i -a &lt;arguments&gt;</code>). In some cases, the command execution may fail. Before creating a plan, make sure it works for your target system/exploit and a correct payload is used.</p>"},{"location":"modules/list/metasploit/#output-serialization","title":"Output serialization","text":"<p>Only the session ID is serialized.</p> <p><code>serialized_output</code> contains:</p> Parameter name Parameter description <code>session_id</code> ID of the created session (only if created)."},{"location":"modules/list/nmap/","title":"Nmap","text":""},{"location":"modules/list/nmap/#description","title":"Description","text":"<p>A module for scanning using the nmap tool.</p> <p>By default, it scans the most common ports and returns a list with all ports and their parameters.</p>"},{"location":"modules/list/nmap/#prerequisites","title":"Prerequisites","text":"<p>Nmap must be installed.</p>"},{"location":"modules/list/nmap/#input-parameters","title":"Input parameters","text":"SimpleCustom"},{"location":"modules/list/nmap/#target","title":"<code>target</code>","text":"<p>Scan target.</p> Name Type Required Default value Example value <code>target</code> string \u2713 <code>127.0.0.1</code>"},{"location":"modules/list/nmap/#ports","title":"<code>ports</code>","text":"<p>List of individual ports or ranges to scan.</p> Name Type Required Default value Example value <code>ports</code> array[integer] \u2717 Top 100 common ports. <code>[1-300, 443]</code>"},{"location":"modules/list/nmap/#options","title":"<code>options</code>","text":"<p>Additional Nmap parameters.</p> Name Type Required Default value Example value <code>options</code> string \u2717 <code>-T4 -sV</code>"},{"location":"modules/list/nmap/#command","title":"<code>command</code>","text":"<p>Nmap command to run with syntax as in command line (with executable).</p> Name Type Required Default value Example value <code>command</code> string \u2713 <code>nmap localhost</code>"},{"location":"modules/list/nmap/#serialize_output","title":"<code>serialize_output</code>","text":"<p>Option to serialize output to JSON. This option will add <code>-oX -</code> parameter to the command (if not already there).</p> Name Type Required Default value Example value <code>serialize_output</code> boolean \u2717 <code>true</code> <code>false</code>"},{"location":"modules/list/nmap/#timeout","title":"<code>timeout</code>","text":"<p>Timeout for the command (in seconds).</p> Name Type Required Default value Example value <code>timeout</code> integer \u2717 <code>60</code> <code>200</code>"},{"location":"modules/list/nmap/#port_parameters","title":"<code>port_parameters</code>","text":"<p>Check if found ports match your desired parameters. If the port with desired parameters is not found, the module will result in failure.</p> Name Type Required Default value Example value <code>port_parameters</code> object \u2717 <code>{\"portid\": \"22\"}</code> <p>Possible options:</p> <pre><code>---\nprotocol: tcp\nportid: '22'\nstate: open\nreason: syn-ack\nreason_ttl: '0'\nservice:\n  name: ssh\n  product: OpenSSH\n  version: 6.6.1p1 Ubuntu 2ubuntu2.13\n  extrainfo: Ubuntu Linux; protocol 2.0\n  ostype: Linux\n  method: probed\n  conf: '10'\ncpe:\n- cpe:/a:openbsd:openssh:6.6.1p1\n- cpe:/o:linux:linux_kernel\nscripts: []\n</code></pre> <p>All options try to find string in the nmap serialized output, and they are non-case sensitive. For example if the <code>cpe</code> in the nmap output would be cpe:/o:linux:linux_kernel, <code>cpe: -linux</code> in <code>port_parameters</code> would match it successfully.</p>"},{"location":"modules/list/nmap/#examples","title":"Examples","text":""},{"location":"modules/list/nmap/#example-with-predefined-inputs","title":"Example with predefined inputs","text":"<p>Input: <pre><code>my-step:\n  module: nmap\n  arguments:\n    target: {{ target }}\n    ports:\n      - 1-30\n      - \"80\"\n    port_parameters:\n      - protocol: tcp\n        portid: '80'\n        state: open\n        reason: syn-ack\n        reason_ttl: '0'\n        service:\n          name: http\n          product: Apache httpd\n          version: 2.4.7\n          method: probed\n          conf: '10'\n        cpe: \n          - apache\n    options: -T4 -sV\n</code></pre></p> <p>Output: <pre><code>{\n  \"result\": \"ok\", \n  \"serialized_output\": {\"192.168.56.3\": {\"osmatch\": {}, \"ports\": [{\"protocol\": \"tcp\", \"portid\": \"21\", \"state\": \"open\", \"reason\": \"syn-ack\", \"reason_ttl\": \"0\", \"service\": {\"name\": \"ftp\", \"product\": \"ProFTPD\", \"version\": \"1.3.5\", \"ostype\": \"Unix\", \"method\": \"probed\", \"conf\": \"10\"}, \"cpe\": [{\"cpe\": \"cpe:/a:proftpd:proftpd:1.3.5\"}], \"scripts\": []}, {\"protocol\": \"tcp\", \"portid\": \"22\", \"state\": \"open\", \"reason\": \"syn-ack\", \"reason_ttl\": \"0\", \"service\": {\"name\": \"ssh\", \"product\": \"OpenSSH\", \"version\": \"6.6.1p1 Ubuntu 2ubuntu2.13\", \"extrainfo\": \"Ubuntu Linux; protocol 2.0\", \"ostype\": \"Linux\", \"method\": \"probed\", \"conf\": \"10\"}, \"cpe\": [{\"cpe\": \"cpe:/a:openbsd:openssh:6.6.1p1\"}, {\"cpe\": \"cpe:/o:linux:linux_kernel\"}], \"scripts\": []}, {\"protocol\": \"tcp\", \"portid\": \"80\", \"state\": \"open\", \"reason\": \"syn-ack\", \"reason_ttl\": \"0\", \"service\": {\"name\": \"http\", \"product\": \"Apache httpd\", \"version\": \"2.4.7\", \"hostname\": \"127.0.2.1\", \"method\": \"probed\", \"conf\": \"10\"}, \"cpe\": [{\"cpe\": \"cpe:/a:apache:http_server:2.4.7\"}], \"scripts\": []}], \"hostname\": [], \"macaddress\": null, \"state\": {\"state\": \"up\", \"reason\": \"syn-ack\", \"reason_ttl\": \"0\"}}, \"stats\": {\"scanner\": \"nmap\", \"args\": \"/usr/bin/nmap -oX - -T4 -sV -p-29,80 192.168.56.3\", \"start\": \"1660830754\", \"startstr\": \"Thu Aug 18 15:52:34 2022\", \"version\": \"7.92\", \"xmloutputversion\": \"1.05\"}, \"runtime\": {\"time\": \"1660830775\", \"timestr\": \"Thu Aug 18 15:52:55 2022\", \"summary\": \"Nmap done at Thu Aug 18 15:52:55 2022; 1 IP address (1 host up) scanned in 21.05 seconds\", \"elapsed\": \"21.05\", \"exit\": \"success\"}}, \n  \"output\": \"&lt;nmaprun scanner=\\\"nmap\\\" args=\\\"/usr/bin/nmap -oX - -T4 -sV -p-29,80 192.168.56.3\\\" start=\\\"1660830754\\\" startstr=\\\"Thu Aug 18 15:52:34 2022\\\" version=\\\"7.92\\\" xmloutputversion=\\\"1.05\\\"&gt;\\n&lt;scaninfo type=\\\"connect\\\" protocol=\\\"tcp\\\" numservices=\\\"30\\\" services=\\\"1-29,80\\\" /&gt;\\n&lt;verbose level=\\\"0\\\" /&gt;\\n&lt;debugging level=\\\"0\\\" /&gt;\\n&lt;hosthint&gt;&lt;status state=\\\"up\\\" reason=\\\"unknown-response\\\" reason_ttl=\\\"0\\\" /&gt;\\n&lt;address addr=\\\"192.168.56.3\\\" addrtype=\\\"ipv4\\\" /&gt;\\n&lt;hostnames&gt;\\n&lt;/hostnames&gt;\\n&lt;/hosthint&gt;\\n&lt;host starttime=\\\"1660830767\\\" endtime=\\\"1660830775\\\"&gt;&lt;status state=\\\"up\\\" reason=\\\"syn-ack\\\" reason_ttl=\\\"0\\\" /&gt;\\n&lt;address addr=\\\"192.168.56.3\\\" addrtype=\\\"ipv4\\\" /&gt;\\n&lt;hostnames&gt;\\n&lt;/hostnames&gt;\\n&lt;ports&gt;&lt;extraports state=\\\"filtered\\\" count=\\\"27\\\"&gt;\\n&lt;extrareasons reason=\\\"no-response\\\" count=\\\"27\\\" proto=\\\"tcp\\\" ports=\\\"1-20,23-29\\\" /&gt;\\n&lt;/extraports&gt;\\n&lt;port protocol=\\\"tcp\\\" portid=\\\"21\\\"&gt;&lt;state state=\\\"open\\\" reason=\\\"syn-ack\\\" reason_ttl=\\\"0\\\" /&gt;&lt;service name=\\\"ftp\\\" product=\\\"ProFTPD\\\" version=\\\"1.3.5\\\" ostype=\\\"Unix\\\" method=\\\"probed\\\" conf=\\\"10\\\"&gt;&lt;cpe&gt;cpe:/a:proftpd:proftpd:1.3.5&lt;/cpe&gt;&lt;/service&gt;&lt;/port&gt;\\n&lt;port protocol=\\\"tcp\\\" portid=\\\"22\\\"&gt;&lt;state state=\\\"open\\\" reason=\\\"syn-ack\\\" reason_ttl=\\\"0\\\" /&gt;&lt;service name=\\\"ssh\\\" product=\\\"OpenSSH\\\" version=\\\"6.6.1p1 Ubuntu 2ubuntu2.13\\\" extrainfo=\\\"Ubuntu Linux; protocol 2.0\\\" ostype=\\\"Linux\\\" method=\\\"probed\\\" conf=\\\"10\\\"&gt;&lt;cpe&gt;cpe:/a:openbsd:openssh:6.6.1p1&lt;/cpe&gt;&lt;cpe&gt;cpe:/o:linux:linux_kernel&lt;/cpe&gt;&lt;/service&gt;&lt;/port&gt;\\n&lt;port protocol=\\\"tcp\\\" portid=\\\"80\\\"&gt;&lt;state state=\\\"open\\\" reason=\\\"syn-ack\\\" reason_ttl=\\\"0\\\" /&gt;&lt;service name=\\\"http\\\" product=\\\"Apache httpd\\\" version=\\\"2.4.7\\\" hostname=\\\"127.0.2.1\\\" method=\\\"probed\\\" conf=\\\"10\\\"&gt;&lt;cpe&gt;cpe:/a:apache:http_server:2.4.7&lt;/cpe&gt;&lt;/service&gt;&lt;/port&gt;\\n&lt;/ports&gt;\\n&lt;times srtt=\\\"464\\\" rttvar=\\\"1667\\\" to=\\\"100000\\\" /&gt;\\n&lt;/host&gt;\\n&lt;runstats&gt;&lt;finished time=\\\"1660830775\\\" timestr=\\\"Thu Aug 18 15:52:55 2022\\\" summary=\\\"Nmap done at Thu Aug 18 15:52:55 2022; 1 IP address (1 host up) scanned in 21.05 seconds\\\" elapsed=\\\"21.05\\\" exit=\\\"success\\\" /&gt;&lt;hosts up=\\\"1\\\" down=\\\"0\\\" total=\\\"1\\\" /&gt;\\n&lt;/runstats&gt;\\n&lt;/nmaprun&gt;\"\n}\n</code></pre></p>"},{"location":"modules/list/nmap/#example-with-custom-command","title":"Example with custom command","text":"<p>Input: <pre><code>my-step:\n  module: nmap\n  arguments:\n    command: nmap -A -T4 --top-ports 100 {{ target }}\n    timeout: 20\n</code></pre></p> <p>Output: <pre><code>{\n    \"result\": \"ok\", \n    \"serialized_output\": {\"192.168.56.51\": {\"osmatch\": {}, \"ports\": [{\"protocol\": \"tcp\", \"portid\": \"22\", \"state\": \"open\", \"reason\": \"syn-ack\", \"reason_ttl\": \"0\", \"service\": {\"name\": \"ssh\", \"product\": \"OpenSSH\", \"version\": \"6.6.1p1 Ubuntu 2ubuntu2.13\", \"extrainfo\": \"Ubuntu Linux; protocol 2.0\", \"ostype\": \"Linux\", \"method\": \"probed\", \"conf\": \"10\"}, \"cpe\": [{\"cpe\": \"cpe:/a:openbsd:openssh:6.6.1p1\"}, {\"cpe\": \"cpe:/o:linux:linux_kernel\"}], \"scripts\": [{\"name\": \"ssh-hostkey\", \"raw\": \"\\n  1024 c7:23:04:56:47:12:29:44:cd:b5:47:f7:5a:cb:ad:6b (DSA)\\n  2048 ab:d9:26:30:04:cd:99:ee:2c:f2:33:82:cd:2d:28:67 (RSA)\\n  256 80:e7:ff:d4:4d:83:fb:e8:9f:69:27:68:bd:05:d4:2b (ECDSA)\\n  256 61:36:ed:35:89:45:08:e0:85:da:45:05:9f:70:ed:15 (ED25519)\", \"data\": {\"children\": [{\"fingerprint\": \"c723045647122944cdb547f75acbad6b\", \"type\": \"ssh-dss\", \"key\": \"AAAAB3NzaC1kc3MAAACBAO9HtEJnY/fqKHmaAw+ycL4gHrICR7T/1JL5lpm0drDcrZtWI/mDhDiICba8yZlQrELAhnsP9yQf0AtRDiAA8zOqFw/55RdejvvUzWWUTI+5shisefPHbSRzHrJsO9khVR9gbDkirdGnOvjzi4qIHsqOPW6ji6/WhBWmjAKOWjr1AAAAFQDeFPBoAJqvJf+dPA1d3v+pH/VVpQAAAIEA3XepPB0Uo4M6J4UYCsX+Lu8SWujQ0AOSm9jQqmVQpD9sjnBWnAUP7ScUoSX1om7GadlZLMWT4GM3ljq3fQ+tNh/hejenJioTfnYY1BLlwpiqpNq9kU4JyF5vq1ZXdOPPKwJar52IDQf+p6M9fMtHrRgLVqXt5eHUWFDCiyxRi6kAAACBAL8lNl2BPKTyk66pGaKyUOBKw030K+2KPCdsupfzKS6oa5ZUWLSv2xToq0mKCLa+AcIr3yCS+q/v0oS85GawG56s5aQ9qNAlQbqDXqM/5TJx7xv57uDsZH5dNzyAEIM/+FjoiT6acQHFQ+DHRMrWwTuU3nHi5BF5k31/DflS8h+J\", \"bits\": \"1024\"}, {\"fingerprint\": \"abd9263004cd99ee2cf23382cd2d2867\", \"type\": \"ssh-rsa\", \"key\": \"AAAAB3NzaC1yc2EAAAADAQABAAABAQDjroBPHxLTl8UXL2r6HHW9Hcj+p2J4uUJh3k7ULVR8/aTRnJxyUfCPDway/lyoa2tY5qtiAF8k4tI53o7cCNnzL/aRW+w3PHIWGaYyI8VmNQxKKvQqcorML5UUaif9H3nTIN6+MIK+bxWMOnjq9vMnz4lzDYp6JX5Ra1LzflhmYHhnVVHA1JUuERp2MzN5OC3QJ+YaOCYYkbuY+GIn/SV+tcTbVXvpj6Dk3IQAQx1plQLbjcLda3wJjB+Umb+Xr/YkrKGvlWJTjc75I1+qIT4IJ1bKeecERHnT/IPpg8w7CDv3mHTlhW3fA9I3D3YElh21C/RFzwaGbOFP5q5pdunP\", \"bits\": \"2048\"}, {\"fingerprint\": \"80e7ffd44d83fbe89f692768bd05d42b\", \"type\": \"ecdsa-sha2-nistp256\", \"key\": \"AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPkR0kyR7nNOBkue6qsy995GPdpnlnrsbDMkm/8lrx8dTkg+xg5exjZcQeATsNgMbzvwAcm4NXEMg3RNiLAJ4Zo=\", \"bits\": \"256\"}, {\"fingerprint\": \"6136ed35894508e085da45059f70ed15\", \"type\": \"ssh-ed25519\", \"key\": \"AAAAC3NzaC1lZDI1NTE5AAAAIJIkt1AlQN1PvvvgH6AgQjroOF2iIYTC0QFqP0Kfx9bC\", \"bits\": \"256\"}]}}]}, {\"protocol\": \"tcp\", \"portid\": \"111\", \"state\": \"open\", \"reason\": \"syn-ack\", \"reason_ttl\": \"0\", \"service\": {\"name\": \"rpcbind\", \"version\": \"2-4\", \"extrainfo\": \"RPC #100000\", \"method\": \"probed\", \"conf\": \"10\"}, \"cpe\": [], \"scripts\": [{\"name\": \"rpcinfo\", \"raw\": \"\\n  program version    port/proto  service\\n  100000  2,3,4        111/tcp   rpcbind\\n  100000  2,3,4        111/udp   rpcbind\\n  100000  3,4          111/tcp6  rpcbind\\n  100000  3,4          111/udp6  rpcbind\\n  100024  1          34829/tcp   status\\n  100024  1          35465/udp   status\\n  100024  1          38358/udp6  status\\n  100024  1          41647/tcp6  status\\n\", \"data\": {\"100024\": {\"tcp6\": {\"version\": {\"children\": [{0: \"1\"}]}, \"children\": [{\"port\": \"41647\", \"owner\": \"107\", \"addr\": \"::\"}]}, \"udp\": {\"version\": {\"children\": [{0: \"1\"}]}, \"children\": [{\"port\": \"35465\", \"owner\": \"107\", \"addr\": \"0.0.0.0\"}]}, \"udp6\": {\"version\": {\"children\": [{0: \"1\"}]}, \"children\": [{\"port\": \"38358\", \"owner\": \"107\", \"addr\": \"::\"}]}, \"tcp\": {\"version\": {\"children\": [{0: \"1\"}]}, \"children\": [{\"port\": \"34829\", \"owner\": \"107\", \"addr\": \"0.0.0.0\"}]}}, \"100000\": {\"udp\": {\"version\": {\"children\": [{0: \"2\", 1: \"3\", 2: \"4\"}]}, \"children\": [{\"port\": \"111\", \"owner\": \"superuser\", \"addr\": \"0.0.0.0\"}]}, \"local\": {\"version\": {\"children\": [{0: \"3\", 1: \"4\"}]}, \"children\": [{\"addr\": \"/run/rpcbind.sock\", \"owner\": \"superuser\"}]}, \"tcp6\": {\"version\": {\"children\": [{0: \"3\", 1: \"4\"}]}, \"children\": [{\"port\": \"111\", \"owner\": \"superuser\", \"addr\": \"::\"}]}, \"udp6\": {\"version\": {\"children\": [{0: \"3\", 1: \"4\"}]}, \"children\": [{\"port\": \"111\", \"owner\": \"superuser\", \"addr\": \"::\"}]}, \"tcp\": {\"version\": {\"children\": [{0: \"2\", 1: \"3\", 2: \"4\"}]}, \"children\": [{\"port\": \"111\", \"owner\": \"superuser\", \"addr\": \"0.0.0.0\"}]}}}}]}], \"hostname\": [], \"macaddress\": null, \"state\": {\"state\": \"up\", \"reason\": \"conn-refused\", \"reason_ttl\": \"0\"}}, \"stats\": {\"scanner\": \"nmap\", \"args\": \"nmap -oX - -A -T4 --top-ports 100 192.168.56.51\", \"start\": \"1660741353\", \"startstr\": \"Wed Aug 17 15:02:33 2022\", \"version\": \"7.92\", \"xmloutputversion\": \"1.05\"}, \"runtime\": {\"time\": \"1660741360\", \"timestr\": \"Wed Aug 17 15:02:40 2022\", \"summary\": \"Nmap done at Wed Aug 17 15:02:40 2022; 1 IP address (1 host up) scanned in 7.65 seconds\", \"elapsed\": \"7.65\", \"exit\": \"success\"}}, \n    \"output\": \"&lt;?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?&gt;\\n&lt;!DOCTYPE nmaprun&gt;\\n&lt;?xml-stylesheet href=\\\"file:///usr/bin/../share/nmap/nmap.xsl\\\" type=\\\"text/xsl\\\"?&gt;\\n&lt;!-- Nmap 7.92 scan initiated Wed Aug 17 15:02:33 2022 as: nmap -oX - -A -T4 -&amp;#45;top-ports 100 192.168.56.51 --&gt;\\n&lt;nmaprun scanner=\\\"nmap\\\" args=\\\"nmap -oX - -A -T4 -&amp;#45;top-ports 100 192.168.56.51\\\" start=\\\"1660741353\\\" startstr=\\\"Wed Aug 17 15:02:33 2022\\\" version=\\\"7.92\\\" xmloutputversion=\\\"1.05\\\"&gt;\\n&lt;scaninfo type=\\\"connect\\\" protocol=\\\"tcp\\\" numservices=\\\"100\\\" services=\\\"7,9,13,21-23,25-26,37,53,79-81,88,106,110-111,113,119,135,139,143-144,179,199,389,427,443-445,465,513-515,543-544,548,554,587,631,646,873,990,993,995,1025-1029,1110,1433,1720,1723,1755,1900,2000-2001,2049,2121,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000-6001,6646,7070,8000,8008-8009,8080-8081,8443,8888,9100,9999-10000,32768,49152-49157\\\"/&gt;\\n&lt;verbose level=\\\"0\\\"/&gt;\\n&lt;debugging level=\\\"0\\\"/&gt;\\n&lt;hosthint&gt;&lt;status state=\\\"up\\\" reason=\\\"unknown-response\\\" reason_ttl=\\\"0\\\"/&gt;\\n&lt;address addr=\\\"192.168.56.51\\\" addrtype=\\\"ipv4\\\"/&gt;\\n&lt;hostnames&gt;\\n&lt;/hostnames&gt;\\n&lt;/hosthint&gt;\\n&lt;host starttime=\\\"1660741353\\\" endtime=\\\"1660741360\\\"&gt;&lt;status state=\\\"up\\\" reason=\\\"conn-refused\\\" reason_ttl=\\\"0\\\"/&gt;\\n&lt;address addr=\\\"192.168.56.51\\\" addrtype=\\\"ipv4\\\"/&gt;\\n&lt;hostnames&gt;\\n&lt;/hostnames&gt;\\n&lt;ports&gt;&lt;extraports state=\\\"closed\\\" count=\\\"98\\\"&gt;\\n&lt;extrareasons reason=\\\"conn-refused\\\" count=\\\"98\\\" proto=\\\"tcp\\\" ports=\\\"7,9,13,21,23,25-26,37,53,79-81,88,106,110,113,119,135,139,143-144,179,199,389,427,443-445,465,513-515,543-544,548,554,587,631,646,873,990,993,995,1025-1029,1110,1433,1720,1723,1755,1900,2000-2001,2049,2121,2717,3000,3128,3306,3389,3986,4899,5000,5009,5051,5060,5101,5190,5357,5432,5631,5666,5800,5900,6000-6001,6646,7070,8000,8008-8009,8080-8081,8443,8888,9100,9999-10000,32768,49152-49157\\\"/&gt;\\n&lt;/extraports&gt;\\n&lt;port protocol=\\\"tcp\\\" portid=\\\"22\\\"&gt;&lt;state state=\\\"open\\\" reason=\\\"syn-ack\\\" reason_ttl=\\\"0\\\"/&gt;&lt;service name=\\\"ssh\\\" product=\\\"OpenSSH\\\" version=\\\"6.6.1p1 Ubuntu 2ubuntu2.13\\\" extrainfo=\\\"Ubuntu Linux; protocol 2.0\\\" ostype=\\\"Linux\\\" method=\\\"probed\\\" conf=\\\"10\\\"&gt;&lt;cpe&gt;cpe:/a:openbsd:openssh:6.6.1p1&lt;/cpe&gt;&lt;cpe&gt;cpe:/o:linux:linux_kernel&lt;/cpe&gt;&lt;/service&gt;&lt;script id=\\\"ssh-hostkey\\\" output=\\\"&amp;#xa;  1024 c7:23:04:56:47:12:29:44:cd:b5:47:f7:5a:cb:ad:6b (DSA)&amp;#xa;  2048 ab:d9:26:30:04:cd:99:ee:2c:f2:33:82:cd:2d:28:67 (RSA)&amp;#xa;  256 80:e7:ff:d4:4d:83:fb:e8:9f:69:27:68:bd:05:d4:2b (ECDSA)&amp;#xa;  256 61:36:ed:35:89:45:08:e0:85:da:45:05:9f:70:ed:15 (ED25519)\\\"&gt;&lt;table&gt;\\n&lt;elem key=\\\"fingerprint\\\"&gt;c723045647122944cdb547f75acbad6b&lt;/elem&gt;\\n&lt;elem key=\\\"type\\\"&gt;ssh-dss&lt;/elem&gt;\\n&lt;elem key=\\\"key\\\"&gt;AAAAB3NzaC1kc3MAAACBAO9HtEJnY/fqKHmaAw+ycL4gHrICR7T/1JL5lpm0drDcrZtWI/mDhDiICba8yZlQrELAhnsP9yQf0AtRDiAA8zOqFw/55RdejvvUzWWUTI+5shisefPHbSRzHrJsO9khVR9gbDkirdGnOvjzi4qIHsqOPW6ji6/WhBWmjAKOWjr1AAAAFQDeFPBoAJqvJf+dPA1d3v+pH/VVpQAAAIEA3XepPB0Uo4M6J4UYCsX+Lu8SWujQ0AOSm9jQqmVQpD9sjnBWnAUP7ScUoSX1om7GadlZLMWT4GM3ljq3fQ+tNh/hejenJioTfnYY1BLlwpiqpNq9kU4JyF5vq1ZXdOPPKwJar52IDQf+p6M9fMtHrRgLVqXt5eHUWFDCiyxRi6kAAACBAL8lNl2BPKTyk66pGaKyUOBKw030K+2KPCdsupfzKS6oa5ZUWLSv2xToq0mKCLa+AcIr3yCS+q/v0oS85GawG56s5aQ9qNAlQbqDXqM/5TJx7xv57uDsZH5dNzyAEIM/+FjoiT6acQHFQ+DHRMrWwTuU3nHi5BF5k31/DflS8h+J&lt;/elem&gt;\\n&lt;elem key=\\\"bits\\\"&gt;1024&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;table&gt;\\n&lt;elem key=\\\"fingerprint\\\"&gt;abd9263004cd99ee2cf23382cd2d2867&lt;/elem&gt;\\n&lt;elem key=\\\"type\\\"&gt;ssh-rsa&lt;/elem&gt;\\n&lt;elem key=\\\"key\\\"&gt;AAAAB3NzaC1yc2EAAAADAQABAAABAQDjroBPHxLTl8UXL2r6HHW9Hcj+p2J4uUJh3k7ULVR8/aTRnJxyUfCPDway/lyoa2tY5qtiAF8k4tI53o7cCNnzL/aRW+w3PHIWGaYyI8VmNQxKKvQqcorML5UUaif9H3nTIN6+MIK+bxWMOnjq9vMnz4lzDYp6JX5Ra1LzflhmYHhnVVHA1JUuERp2MzN5OC3QJ+YaOCYYkbuY+GIn/SV+tcTbVXvpj6Dk3IQAQx1plQLbjcLda3wJjB+Umb+Xr/YkrKGvlWJTjc75I1+qIT4IJ1bKeecERHnT/IPpg8w7CDv3mHTlhW3fA9I3D3YElh21C/RFzwaGbOFP5q5pdunP&lt;/elem&gt;\\n&lt;elem key=\\\"bits\\\"&gt;2048&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;table&gt;\\n&lt;elem key=\\\"fingerprint\\\"&gt;80e7ffd44d83fbe89f692768bd05d42b&lt;/elem&gt;\\n&lt;elem key=\\\"type\\\"&gt;ecdsa-sha2-nistp256&lt;/elem&gt;\\n&lt;elem key=\\\"key\\\"&gt;AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBPkR0kyR7nNOBkue6qsy995GPdpnlnrsbDMkm/8lrx8dTkg+xg5exjZcQeATsNgMbzvwAcm4NXEMg3RNiLAJ4Zo=&lt;/elem&gt;\\n&lt;elem key=\\\"bits\\\"&gt;256&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;table&gt;\\n&lt;elem key=\\\"fingerprint\\\"&gt;6136ed35894508e085da45059f70ed15&lt;/elem&gt;\\n&lt;elem key=\\\"type\\\"&gt;ssh-ed25519&lt;/elem&gt;\\n&lt;elem key=\\\"key\\\"&gt;AAAAC3NzaC1lZDI1NTE5AAAAIJIkt1AlQN1PvvvgH6AgQjroOF2iIYTC0QFqP0Kfx9bC&lt;/elem&gt;\\n&lt;elem key=\\\"bits\\\"&gt;256&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;/script&gt;&lt;/port&gt;\\n&lt;port protocol=\\\"tcp\\\" portid=\\\"111\\\"&gt;&lt;state state=\\\"open\\\" reason=\\\"syn-ack\\\" reason_ttl=\\\"0\\\"/&gt;&lt;service name=\\\"rpcbind\\\" version=\\\"2-4\\\" extrainfo=\\\"RPC #100000\\\" method=\\\"probed\\\" conf=\\\"10\\\"/&gt;&lt;script id=\\\"rpcinfo\\\" output=\\\"&amp;#xa;  program version    port/proto  service&amp;#xa;  100000  2,3,4        111/tcp   rpcbind&amp;#xa;  100000  2,3,4        111/udp   rpcbind&amp;#xa;  100000  3,4          111/tcp6  rpcbind&amp;#xa;  100000  3,4          111/udp6  rpcbind&amp;#xa;  100024  1          34829/tcp   status&amp;#xa;  100024  1          35465/udp   status&amp;#xa;  100024  1          38358/udp6  status&amp;#xa;  100024  1          41647/tcp6  status&amp;#xa;\\\"&gt;&lt;table key=\\\"100024\\\"&gt;\\n&lt;table key=\\\"tcp6\\\"&gt;\\n&lt;table key=\\\"version\\\"&gt;\\n&lt;elem&gt;1&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;elem key=\\\"port\\\"&gt;41647&lt;/elem&gt;\\n&lt;elem key=\\\"owner\\\"&gt;107&lt;/elem&gt;\\n&lt;elem key=\\\"addr\\\"&gt;::&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;table key=\\\"udp\\\"&gt;\\n&lt;table key=\\\"version\\\"&gt;\\n&lt;elem&gt;1&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;elem key=\\\"port\\\"&gt;35465&lt;/elem&gt;\\n&lt;elem key=\\\"owner\\\"&gt;107&lt;/elem&gt;\\n&lt;elem key=\\\"addr\\\"&gt;0.0.0.0&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;table key=\\\"udp6\\\"&gt;\\n&lt;table key=\\\"version\\\"&gt;\\n&lt;elem&gt;1&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;elem key=\\\"port\\\"&gt;38358&lt;/elem&gt;\\n&lt;elem key=\\\"owner\\\"&gt;107&lt;/elem&gt;\\n&lt;elem key=\\\"addr\\\"&gt;::&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;table key=\\\"tcp\\\"&gt;\\n&lt;table key=\\\"version\\\"&gt;\\n&lt;elem&gt;1&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;elem key=\\\"port\\\"&gt;34829&lt;/elem&gt;\\n&lt;elem key=\\\"owner\\\"&gt;107&lt;/elem&gt;\\n&lt;elem key=\\\"addr\\\"&gt;0.0.0.0&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;/table&gt;\\n&lt;table key=\\\"100000\\\"&gt;\\n&lt;table key=\\\"udp\\\"&gt;\\n&lt;table key=\\\"version\\\"&gt;\\n&lt;elem&gt;2&lt;/elem&gt;\\n&lt;elem&gt;3&lt;/elem&gt;\\n&lt;elem&gt;4&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;elem key=\\\"port\\\"&gt;111&lt;/elem&gt;\\n&lt;elem key=\\\"owner\\\"&gt;superuser&lt;/elem&gt;\\n&lt;elem key=\\\"addr\\\"&gt;0.0.0.0&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;table key=\\\"local\\\"&gt;\\n&lt;table key=\\\"version\\\"&gt;\\n&lt;elem&gt;3&lt;/elem&gt;\\n&lt;elem&gt;4&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;elem key=\\\"addr\\\"&gt;/run/rpcbind.sock&lt;/elem&gt;\\n&lt;elem key=\\\"owner\\\"&gt;superuser&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;table key=\\\"tcp6\\\"&gt;\\n&lt;table key=\\\"version\\\"&gt;\\n&lt;elem&gt;3&lt;/elem&gt;\\n&lt;elem&gt;4&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;elem key=\\\"port\\\"&gt;111&lt;/elem&gt;\\n&lt;elem key=\\\"owner\\\"&gt;superuser&lt;/elem&gt;\\n&lt;elem key=\\\"addr\\\"&gt;::&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;table key=\\\"udp6\\\"&gt;\\n&lt;table key=\\\"version\\\"&gt;\\n&lt;elem&gt;3&lt;/elem&gt;\\n&lt;elem&gt;4&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;elem key=\\\"port\\\"&gt;111&lt;/elem&gt;\\n&lt;elem key=\\\"owner\\\"&gt;superuser&lt;/elem&gt;\\n&lt;elem key=\\\"addr\\\"&gt;::&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;table key=\\\"tcp\\\"&gt;\\n&lt;table key=\\\"version\\\"&gt;\\n&lt;elem&gt;2&lt;/elem&gt;\\n&lt;elem&gt;3&lt;/elem&gt;\\n&lt;elem&gt;4&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;elem key=\\\"port\\\"&gt;111&lt;/elem&gt;\\n&lt;elem key=\\\"owner\\\"&gt;superuser&lt;/elem&gt;\\n&lt;elem key=\\\"addr\\\"&gt;0.0.0.0&lt;/elem&gt;\\n&lt;/table&gt;\\n&lt;/table&gt;\\n&lt;/script&gt;&lt;/port&gt;\\n&lt;/ports&gt;\\n&lt;times srtt=\\\"484\\\" rttvar=\\\"383\\\" to=\\\"100000\\\"/&gt;\\n&lt;/host&gt;\\n&lt;runstats&gt;&lt;finished time=\\\"1660741360\\\" timestr=\\\"Wed Aug 17 15:02:40 2022\\\" summary=\\\"Nmap done at Wed Aug 17 15:02:40 2022; 1 IP address (1 host up) scanned in 7.65 seconds\\\" elapsed=\\\"7.65\\\" exit=\\\"success\\\"/&gt;&lt;hosts up=\\\"1\\\" down=\\\"0\\\" total=\\\"1\\\"/&gt;\\n&lt;/runstats&gt;\\n&lt;/nmaprun&gt;\"\n}\n</code></pre></p>"},{"location":"modules/list/nmap/#troubleshooting","title":"Troubleshooting","text":"<p>So far so good.</p>"},{"location":"modules/list/nmap/#output-serialization","title":"Output serialization","text":"<p>Output is serialized by Nmap itself.</p>"},{"location":"modules/list/script/","title":"Script","text":""},{"location":"modules/list/script/#description","title":"Description","text":"<p>A module for executing scripts (Python, sh, bash, ...).</p>"},{"location":"modules/list/script/#prerequisites","title":"Prerequisites","text":"<p>There are no specific prerequisites.</p>"},{"location":"modules/list/script/#input-parameters","title":"Input parameters","text":""},{"location":"modules/list/script/#script_path","title":"<code>script_path</code>","text":"<p>Full path to the script.</p> Name Type Required Default value Example value <code>script_path</code> string \u2713 <code>/tmp/script.py</code>"},{"location":"modules/list/script/#script_arguments","title":"<code>script_arguments</code>","text":"<p>Optional arguments for the script.</p> Name Type Required Default value Example value <code>script_arguments</code> string \u2717 <code>-arg1 example</code>"},{"location":"modules/list/script/#executable","title":"<code>executable</code>","text":"<p>What should be used to execute the script.</p> Name Type Required Default value Example value <code>executable</code> string \u2713 <code>/usr/bin/python3</code>"},{"location":"modules/list/script/#serialize_output","title":"<code>serialize_output</code>","text":"<p>Try to parse the output of the script into <code>serialized_output</code>.</p> Name Type Required Default value Example value <code>serialize_output</code> boolean \u2717 <code>false</code> <code>true</code>"},{"location":"modules/list/script/#timeout","title":"<code>timeout</code>","text":"<p>Timeout for the command (in seconds).</p> Name Type Required Default value Example value <code>timeout</code> integer \u2717 <code>60</code> <code>30</code>"},{"location":"modules/list/script/#examples","title":"Examples","text":""},{"location":"modules/list/script/#run-python-script","title":"Run Python script","text":"<p>Input: <pre><code>my-step:\n  module: script\n  arguments:\n    script_path: /tmp/example.py\n    script_arguments: -t {{ target }}\n    executable: python3\n    timeout: 30\n</code></pre></p> <p>Output: <pre><code>{\n  \"serialized_output\": {},\n  \"output\": \"script output\",\n  \"result\": \"ok\"\n}\n</code></pre></p>"},{"location":"modules/list/script/#troubleshooting","title":"Troubleshooting","text":"<p>So far so good.</p>"},{"location":"modules/list/script/#output-serialization","title":"Output serialization","text":"<p>Automatic output serialization is an experimental feature. It allows you to take the output and use it in other modules in the form of a <code>serialized_output</code>. For this to work, the command output must be a valid JSON (<code>\"some text\"</code>, <code>{\"a\": \"b\"}</code>, <code>[\"a\", \"b\"]</code>).</p>"},{"location":"modules/list/wpscan/","title":"WPScan","text":""},{"location":"modules/list/wpscan/#description","title":"Description","text":"<p>A module for scanning WordPress pages using the WPScan tool.</p>"},{"location":"modules/list/wpscan/#prerequisites","title":"Prerequisites","text":"<p>WPScan must be installed.</p>"},{"location":"modules/list/wpscan/#input-parameters","title":"Input parameters","text":"SimpleCustom"},{"location":"modules/list/wpscan/#target","title":"<code>target</code>","text":"<p>Scan target.</p> Name Type Required Default value Example value <code>target</code> string \u2713 <code>http://127.0.0.1:8000/</code>"},{"location":"modules/list/wpscan/#api_token","title":"<code>api_token</code>","text":"<p>The WPScan API Token to display vulnerability data, available at https://wpscan.com/profile.</p> Name Type Required Default value Example value <code>api_token</code> string \u2717"},{"location":"modules/list/wpscan/#options","title":"<code>options</code>","text":"<p>Additional WPScan parameters.</p> Name Type Required Default value Example value <code>options</code> string \u2717 <code>--max-threads 7</code>"},{"location":"modules/list/wpscan/#serialize_output","title":"<code>serialize_output</code>","text":"<p>Use WPScan's serialization (<code>-f json</code>).</p> Name Type Required Default value Example value <code>serialize_output</code> boolean \u2717 <code>true</code> <code>false</code>"},{"location":"modules/list/wpscan/#command","title":"<code>command</code>","text":"<p>WPScan command to run with syntax as in command line (with executable).</p> Name Type Required Default value Example value <code>command</code> string \u2713 <code>wpscan --url http://127.0.0.1:8000/ -f json</code> <p>For the scan result to be in the <code>serialized_output</code>, use <code>-f json</code> parameter.</p>"},{"location":"modules/list/wpscan/#examples","title":"Examples","text":""},{"location":"modules/list/wpscan/#example-with-serialized-output","title":"Example with serialized output","text":"<p>Input: <pre><code>my-step:\n  module: wpscan\n  arguments:\n    target: {{ target }}\n    options: --max-threads 7\n</code></pre></p> <p>Output: <pre><code>{\n  \"result\": \"ok\", \n  \"output\": \"\", \n  \"serialized_output\": {\"banner\": {\"description\": \"WordPress Security Scanner by the WPScan Team\", \"version\": \"3.8.22\", \"authors\": [\"@_WPScan_\", \"@ethicalhack3r\", \"@erwan_lr\", \"@firefart\"], \"sponsor\": \"Sponsored by Automattic - https://automattic.com/\"}, \"start_time\": 1667510731, \"start_memory\": 50909184, \"target_url\": \"http://127.12.0.1/\", \"target_ip\": \"127.12.0.1\", \"effective_url\": \"http://127.12.0.1/\", \"interesting_findings\": [{\"url\": \"http://127.12.0.1/\", \"to_s\": \"Headers\", \"type\": \"headers\", \"found_by\": \"Headers (Passive Detection)\", \"confidence\": 100, \"confirmed_by\": {}, \"references\": {}, \"interesting_entries\": [\"Server: Apache/2.4.7 (Ubuntu)\", \"X-Powered-By: PHP/5.5.9-1ubuntu4.29\", \"SecretHeader: SecretValue\", \"via: Squid 1.0.0\"]}, {\"url\": \"http://127.12.0.1/robots.txt\", \"to_s\": \"robots.txt found: http://127.12.0.1/robots.txt\", \"type\": \"robots_txt\", \"found_by\": \"Robots Txt (Aggressive Detection)\", \"confidence\": 100, \"confirmed_by\": {}, \"references\": {}, \"interesting_entries\": []}, {\"url\": \"http://127.12.0.1/searchreplacedb2.php\", \"to_s\": \"Search Replace DB script found: http://127.12.0.1/searchreplacedb2.php\", \"type\": \"search_replace_db2\", \"found_by\": \"Search Replace Db2 (Aggressive Detection)\", \"confidence\": 100, \"confirmed_by\": {}, \"references\": {\"url\": [\"https://interconnectit.com/products/search-and-replace-for-wordpress-databases/\"]}, \"interesting_entries\": []}, {\"url\": \"http://127.12.0.1/xmlrpc.php\", \"to_s\": \"XML-RPC seems to be enabled: http://127.12.0.1/xmlrpc.php\", \"type\": \"xmlrpc\", \"found_by\": \"Headers (Passive Detection)\", \"confidence\": 100, \"confirmed_by\": {\"Link Tag (Passive Detection)\": {\"confidence\": 30}, \"Direct Access (Aggressive Detection)\": {\"confidence\": 100}}, \"references\": {\"url\": [\"http://codex.wordpress.org/XML-RPC_Pingback_API\"], \"metasploit\": [\"auxiliary/scanner/http/wordpress_ghost_scanner\", \"auxiliary/dos/http/wordpress_xmlrpc_dos\", \"auxiliary/scanner/http/wordpress_xmlrpc_login\", \"auxiliary/scanner/http/wordpress_pingback_access\"]}, \"interesting_entries\": []}, {\"url\": \"http://127.12.0.1/readme.html\", \"to_s\": \"WordPress readme found: http://127.12.0.1/readme.html\", \"type\": \"readme\", \"found_by\": \"Direct Access (Aggressive Detection)\", \"confidence\": 100, \"confirmed_by\": {}, \"references\": {}, \"interesting_entries\": []}, {\"url\": \"http://127.12.0.1/wp-content/debug.log\", \"to_s\": \"Debug Log found: http://127.12.0.1/wp-content/debug.log\", \"type\": \"debug_log\", \"found_by\": \"Direct Access (Aggressive Detection)\", \"confidence\": 100, \"confirmed_by\": {}, \"references\": {\"url\": [\"https://codex.wordpress.org/Debugging_in_WordPress\"]}, \"interesting_entries\": []}, {\"url\": \"http://127.12.0.1/wp-cron.php\", \"to_s\": \"The external WP-Cron seems to be enabled: http://127.12.0.1/wp-cron.php\", \"type\": \"wp_cron\", \"found_by\": \"Direct Access (Aggressive Detection)\", \"confidence\": 60, \"confirmed_by\": {}, \"references\": {\"url\": [\"https://www.iplocation.net/defend-wordpress-from-ddos\", \"https://github.com/wpscanteam/wpscan/issues/1299\"]}, \"interesting_entries\": []}], \"version\": {\"number\": \"4.2.34\", \"release_date\": \"0001-01-01\", \"status\": \"outdated\", \"found_by\": \"Rss Generator (Passive Detection)\", \"confidence\": 100, \"interesting_entries\": [\"http://127.12.0.1/index.php/feed/, &lt;generator&gt;https://wordpress.org/?v=4.2.34&lt;/generator&gt;\", \"http://127.12.0.1/index.php/comments/feed/, &lt;generator&gt;https://wordpress.org/?v=4.2.34&lt;/generator&gt;\"], \"confirmed_by\": {}, \"vulnerabilities\": []}, \"main_theme\": {\"slug\": \"twentyfifteen\", \"location\": \"http://127.12.0.1/wp-content/themes/twentyfifteen/\", \"latest_version\": \"3.3\", \"last_updated\": \"2022-11-02T00:00:00.000Z\", \"outdated\": true, \"readme_url\": \"http://127.12.0.1/wp-content/themes/twentyfifteen/readme.txt\", \"directory_listing\": true, \"error_log_url\": null, \"style_url\": \"http://127.12.0.1/wp-content/themes/twentyfifteen/style.css?ver=4.2.34\", \"style_name\": \"Twenty Fifteen\", \"style_uri\": \"https://wordpress.org/themes/twentyfifteen/\", \"description\": \"Our 2015 default theme is clean, blog-focused, and designed for clarity. Twenty Fifteen's simple, straightforward typography is readable on a wide variety of screen sizes, and suitable for multiple languages. We designed it using a mobile-first approach, meaning your content takes center-stage, regardless of whether your visitors arrive by smartphone, tablet, laptop, or desktop computer.\", \"author\": \"the WordPress team\", \"author_uri\": \"https://wordpress.org/\", \"template\": null, \"license\": \"GNU General Public License v2 or later\", \"license_uri\": \"http://www.gnu.org/licenses/gpl-2.0.html\", \"tags\": \"black, blue, gray, pink, purple, white, yellow, dark, light, two-columns, left-sidebar, fixed-layout, responsive-layout, accessibility-ready, custom-background, custom-colors, custom-header, custom-menu, editor-style, featured-images, microformats, post-formats, rtl-language-support, sticky-post, threaded-comments, translation-ready\", \"text_domain\": \"twentyfifteen\", \"found_by\": \"Css Style In Homepage (Passive Detection)\", \"confidence\": 70, \"interesting_entries\": [], \"confirmed_by\": {}, \"vulnerabilities\": [], \"version\": {\"number\": \"1.1\", \"confidence\": 80, \"found_by\": \"Style (Passive Detection)\", \"interesting_entries\": [\"http://127.12.0.1/wp-content/themes/twentyfifteen/style.css?ver=4.2.34, Match: 'Version: 1.1'\"], \"confirmed_by\": {}}, \"parents\": []}, \"plugins\": {}, \"config_backups\": {\"http://127.12.0.1/wp-config.old\": {\"found_by\": \"Direct Access (Aggressive Detection)\", \"confidence\": 100, \"interesting_entries\": [], \"confirmed_by\": {}}, \"http://127.12.0.1/wp-config.php.save\": {\"found_by\": \"Direct Access (Aggressive Detection)\", \"confidence\": 100, \"interesting_entries\": [], \"confirmed_by\": {}}, \"http://127.12.0.1/wp-config.php~\": {\"found_by\": \"Direct Access (Aggressive Detection)\", \"confidence\": 100, \"interesting_entries\": [], \"confirmed_by\": {}}, \"http://127.12.0.1/wp-config.txt\": {\"found_by\": \"Direct Access (Aggressive Detection)\", \"confidence\": 100, \"interesting_entries\": [], \"confirmed_by\": {}}}, \"vuln_api\": {\"error\": \"No WPScan API Token given, as a result vulnerability data has not been output.\\nYou can get a free API token with 25 daily requests by registering at https://wpscan.com/register\"}, \"stop_time\": 1667510735, \"elapsed\": 4, \"requests_done\": 139, \"cached_requests\": 44, \"data_sent\": 34812, \"data_sent_humanised\": \"33.996 KB\", \"data_received\": 20794, \"data_received_humanised\": \"20.307 KB\", \"used_memory\": 244031488, \"used_memory_humanised\": \"232.727 MB\"}\n}\n</code></pre></p>"},{"location":"modules/list/wpscan/#example-with-text-output","title":"Example with text output","text":"<p>Input: <pre><code>my-step:\n  module: wpscan\n  arguments:\n    target: {{ target }}\n    options: --max-threads 7\n    serialized_output: false\n</code></pre></p> <p>Output: <pre><code>{\n  \"result\": \"ok\", \n  \"output\": \"_______________________________________________________________\\n         __          _______   _____\\n         \\\\ \\\\        / /  __ \\\\ / ____|\\n          \\\\ \\\\  /\\\\  / /| |__) | (___   ___  __ _ _ __ \u00ae\\n           \\\\ \\\\/  \\\\/ / |  ___/ \\\\___ \\\\ / __|/ _` | '_ \\\\\\n            \\\\  /\\\\  /  | |     ____) | (__| (_| | | | |\\n             \\\\/  \\\\/   |_|    |_____/ \\\\___|\\\\__,_|_| |_|\\n\\n         WordPress Security Scanner by the WPScan Team\\n                         Version 3.8.17\\n       Sponsored by Automattic - https://automattic.com/\\n       @_WPScan_, @ethicalhack3r, @erwan_lr, @firefart\\n_______________________________________________________________\\n\\n\\x1b[32m[+]\\x1b[0m URL: http://127.12.0.1/ [127.12.0.1]\\n\\x1b[32m[+]\\x1b[0m Started: Mon Nov  7 15:56:24 2022\\n\\nInteresting Finding(s):\\n\\n\\x1b[32m[+]\\x1b[0m Headers\\n | Interesting Entries:\\n |  - Server: Apache/2.4.7 (Ubuntu)\\n |  - X-Powered-By: PHP/5.5.9-1ubuntu4.29\\n |  - SecretHeader: SecretValue\\n |  - via: Squid 1.0.0\\n | Found By: Headers (Passive Detection)\\n | Confidence: 100%\\n\\n\\x1b[32m[+]\\x1b[0m robots.txt found: http://127.12.0.1/robots.txt\\n | Found By: Robots Txt (Aggressive Detection)\\n | Confidence: 100%\\n\\n\\x1b[32m[+]\\x1b[0m Search Replace DB script found: http://127.12.0.1/searchreplacedb2.php\\n | Found By: Search Replace Db2 (Aggressive Detection)\\n | Confidence: 100%\\n | Reference: https://interconnectit.com/products/search-and-replace-for-wordpress-databases/\\n\\n\\x1b[32m[+]\\x1b[0m XML-RPC seems to be enabled: http://127.12.0.1/xmlrpc.php\\n | Found By: Headers (Passive Detection)\\n | Confidence: 100%\\n | Confirmed By:\\n |  - Link Tag (Passive Detection), 30% confidence\\n |  - Direct Access (Aggressive Detection), 100% confidence\\n | References:\\n |  - http://codex.wordpress.org/XML-RPC_Pingback_API\\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_ghost_scanner/\\n |  - https://www.rapid7.com/db/modules/auxiliary/dos/http/wordpress_xmlrpc_dos/\\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_xmlrpc_login/\\n |  - https://www.rapid7.com/db/modules/auxiliary/scanner/http/wordpress_pingback_access/\\n\\n\\x1b[32m[+]\\x1b[0m WordPress readme found: http://127.12.0.1/readme.html\\n | Found By: Direct Access (Aggressive Detection)\\n | Confidence: 100%\\n\\n\\x1b[32m[+]\\x1b[0m Debug Log found: http://127.12.0.1/wp-content/debug.log\\n | Found By: Direct Access (Aggressive Detection)\\n | Confidence: 100%\\n | Reference: https://codex.wordpress.org/Debugging_in_WordPress\\n\\n\\x1b[32m[+]\\x1b[0m The external WP-Cron seems to be enabled: http://127.12.0.1/wp-cron.php\\n | Found By: Direct Access (Aggressive Detection)\\n | Confidence: 60%\\n | References:\\n |  - https://www.iplocation.net/defend-wordpress-from-ddos\\n |  - https://github.com/wpscanteam/wpscan/issues/1299\\n\\n\\x1b[32m[+]\\x1b[0m WordPress version 4.2.34 identified (Outdated, released on 0001-01-01).\\n | Found By: Rss Generator (Passive Detection)\\n |  - http://127.12.0.1/index.php/feed/, &lt;generator&gt;https://wordpress.org/?v=4.2.34&lt;/generator&gt;\\n |  - http://127.12.0.1/index.php/comments/feed/, &lt;generator&gt;https://wordpress.org/?v=4.2.34&lt;/generator&gt;\\n\\n\\x1b[32m[+]\\x1b[0m WordPress theme in use: twentyfifteen\\n | Location: http://127.12.0.1/wp-content/themes/twentyfifteen/\\n | Last Updated: 2022-11-02T00:00:00.000Z\\n | Readme: http://127.12.0.1/wp-content/themes/twentyfifteen/readme.txt\\n | \\x1b[33m[!]\\x1b[0m The version is out of date, the latest version is 3.3\\n | Style URL: http://127.12.0.1/wp-content/themes/twentyfifteen/style.css?ver=4.2.34\\n | Style Name: Twenty Fifteen\\n | Style URI: https://wordpress.org/themes/twentyfifteen/\\n | Description: Our 2015 default theme is clean, blog-focused, and designed for clarity. Twenty Fifteen's simple, st...\\n | Author: the WordPress team\\n | Author URI: https://wordpress.org/\\n |\\n | Found By: Css Style In Homepage (Passive Detection)\\n |\\n | Version: 1.1 (80% confidence)\\n | Found By: Style (Passive Detection)\\n |  - http://127.12.0.1/wp-content/themes/twentyfifteen/style.css?ver=4.2.34, Match: 'Version: 1.1'\\n\\n\\x1b[32m[+]\\x1b[0m Enumerating All Plugins (via Passive Methods)\\n\\n\\x1b[34m[i]\\x1b[0m No plugins Found.\\n\\n\\x1b[32m[+]\\x1b[0m Enumerating Config Backups (via Passive and Aggressive Methods)\\n\\n Checking Config Backups -: |==================================================|\\n\\n\\x1b[34m[i]\\x1b[0m Config Backup(s) Identified:\\n\\n\\x1b[31m[!]\\x1b[0m http://127.12.0.1/wp-config.old\\n | Found By: Direct Access (Aggressive Detection)\\n\\n\\x1b[31m[!]\\x1b[0m http://127.12.0.1/wp-config.php.save\\n | Found By: Direct Access (Aggressive Detection)\\n\\n\\x1b[31m[!]\\x1b[0m http://127.12.0.1/wp-config.php~\\n | Found By: Direct Access (Aggressive Detection)\\n\\n\\x1b[31m[!]\\x1b[0m http://127.12.0.1/wp-config.txt\\n | Found By: Direct Access (Aggressive Detection)\\n\\n\\x1b[33m[!]\\x1b[0m No WPScan API Token given, as a result vulnerability data has not been output.\\n\\x1b[33m[!]\\x1b[0m You can get a free API token with 25 daily requests by registering at https://wpscan.com/register\\n\\n\\x1b[32m[+]\\x1b[0m Finished: Mon Nov  7 15:56:34 2022\\n\\x1b[32m[+]\\x1b[0m Requests Done: 139\\n\\x1b[32m[+]\\x1b[0m Cached Requests: 44\\n\\x1b[32m[+]\\x1b[0m Data Sent: 34.132 KB\\n\\x1b[32m[+]\\x1b[0m Data Received: 20.307 KB\\n\\x1b[32m[+]\\x1b[0m Memory used: 243.156 MB\\n\\x1b[32m[+]\\x1b[0m Elapsed time: 00:00:10\\n\", \n  \"serialized_output\": {}\n}\n</code></pre></p>"},{"location":"modules/list/wpscan/#troubleshooting","title":"Troubleshooting","text":"<p>So far so good.</p>"},{"location":"modules/list/wpscan/#output-serialization","title":"Output serialization","text":"<p>Output is serialized by WPScan itself.</p>"},{"location":"usage/","title":"Usage","text":"<p>Before starting the applications, make sure to check out the settings page. In case of a misconfiguration the application may not start or Worker and Hive may not communicate. If that happens check the command output or logs.</p>"},{"location":"usage/#hive","title":"Hive","text":"<p>Use the following to invoke the application: <pre><code>cryton-hive\n</code></pre></p> <p>You should see a help page: <pre><code>Usage: cryton-hive [OPTIONS] COMMAND [ARGS]...\n\n  Cryton Hive.\n\nOptions:\n  ...\n</code></pre></p> <p>To learn about each command's options use: <pre><code>cryton-hive &lt;your command&gt; --help\n</code></pre></p> <p>To migrate the database and start the application use: <pre><code>cryton-hive start --migrate-database\n</code></pre></p> <p>REST API is by default running at http://0.0.0.0:8000 (interactive documentation at http://0.0.0.0:8000/doc).</p> <p>To serve the REST API on a different host/port, use the <code>--bind</code> option: <pre><code>cryton-hive start --bind &lt;address&gt;:&lt;port&gt;\n</code></pre></p> Run it in the background <p>Use the <code>nohup</code> command: <pre><code>nohup cryton-hive start &gt; /tmp/hive_std_out 2&gt;&amp;1 &amp;\n</code></pre></p> <p>To stop it, find its processes and stop them: <pre><code>ps -aux | grep cryton-hive\nkill &lt;PID&gt; &lt;PID&gt;\n</code></pre></p>"},{"location":"usage/#worker","title":"Worker","text":"<p>Use the following to invoke the application: <pre><code>cryton-worker\n</code></pre></p> <p>You should see a help page: <pre><code>Usage: cryton-worker [OPTIONS] COMMAND [ARGS]...\n\n  Cryton Worker.\n\nOptions:\n  ...\n</code></pre></p> <p>To learn about each command's options use: <pre><code>cryton-worker &lt;your command&gt; --help\n</code></pre></p> <p>To start the Worker use: <pre><code>cryton-worker start\n</code></pre></p> Run it in the background <p>Use the <code>nohup</code> command: <pre><code>nohup cryton-worker start &gt; /tmp/worker_std_out 2&gt;&amp;1 &amp;\n</code></pre></p> <p>To stop it, find its processes and kill them: <pre><code>ps -aux | grep cryton-worker\nkill &lt;PID&gt; &lt;PID&gt;\n</code></pre></p>"},{"location":"usage/#cli","title":"CLI","text":"<p>Use the following command to invoke the application: <pre><code>cryton-cli\n</code></pre></p> <p>You should see a help page: <pre><code>Usage: cryton-cli [OPTIONS] COMMAND [ARGS]...\n\n  Wrapper for Hive's REST API.\n\nOptions:\n  ...\n</code></pre></p> <p>To learn about each command's options use: <pre><code>cryton-cli &lt;your command&gt; --help\n</code></pre></p>"},{"location":"usage/workflows/","title":"Workflows","text":"<p>The current page describes the ideal sequence of steps to use when you want to use Cryton to automate the attacks.</p>"},{"location":"usage/workflows/#deployment","title":"Deployment","text":"<p>Once you have your infrastructure, install Cryton onto it:</p> <ol> <li>Deploy and start Hive</li> <li>Deploy and start Worker(s)</li> <li>Deploy CLI or Frontend</li> <li>Make sure it works:<ul> <li>To ensure your deployment works, try to perform a successful healthcheck on your Worker(s) using CLI, frontend, or possibly REST API</li> <li>Additionally, check the Hive and Worker(s) output if there are any errors</li> </ul> </li> </ol> <p>Tips</p> <ul> <li>In case you are hosting a Cyber defense exercise with an infrastructure for each team, use one Worker per team</li> </ul>"},{"location":"usage/workflows/#attack-planning","title":"Attack planning","text":"<p>Every Run can be described by a simple formula: <pre><code>plan template + inventory = Plan instance\nPlan instance + Worker = Plan execution\nPlan instance + Workers = Run\n</code></pre></p> <p>Which results in the following steps:</p> <ol> <li>Design a plan template (scenario)</li> <li>Create a Plan instance</li> <li>Register the Worker(s)</li> <li>Create a Run</li> <li>Schedule or execute the Run</li> <li>Get the Run report</li> </ol>"}]}